{"ast":null,"code":"import { create } from 'zustand';\nimport socketManager from '../utils/socket';\nconst useGameStore = create((set, get) => ({\n  // Room state\n  currentRoom: null,\n  players: [],\n  isInRoom: false,\n  // Game state\n  gameState: null,\n  isGameActive: false,\n  currentRound: 0,\n  totalRounds: 5,\n  timeRemaining: 0,\n  currentWord: '',\n  isDrawing: false,\n  currentDrawer: null,\n  guessedPlayers: [],\n  guessProgress: {\n    guessed: 0,\n    total: 0\n  },\n  // Drawing state\n  drawingData: [],\n  brushColor: '#000000',\n  brushSize: 2,\n  isDrawingMode: false,\n  // Chat state\n  chatMessages: [],\n  guessInput: '',\n  // Socket state\n  isSocketConnected: false,\n  // UI state\n  isLoading: false,\n  error: null,\n  showRoundEndPopup: false,\n  roundEndData: null,\n  showGameEndPopup: false,\n  gameEndData: null,\n  // Actions\n  setSocketConnected: connected => {\n    set({\n      isSocketConnected: connected\n    });\n  },\n  joinRoom: roomId => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    socketManager.joinRoom(roomId);\n    set({\n      isInRoom: true,\n      isLoading: false\n    });\n  },\n  leaveRoom: () => {\n    socketManager.leaveRoom();\n    set({\n      currentRoom: null,\n      players: [],\n      isInRoom: false,\n      gameState: null,\n      isGameActive: false,\n      chatMessages: [],\n      drawingData: []\n    });\n  },\n  deleteRoom: () => {\n    socketManager.deleteRoom();\n    set({\n      currentRoom: null,\n      players: [],\n      isInRoom: false,\n      gameState: null,\n      isGameActive: false,\n      chatMessages: [],\n      drawingData: []\n    });\n  },\n  setRoomData: roomData => {\n    set({\n      currentRoom: roomData\n    });\n  },\n  setPlayers: players => {\n    // Ensure players array is unique by ID\n    const uniquePlayers = players.filter((player, index, self) => index === self.findIndex(p => p.id === player.id));\n    set({\n      players: uniquePlayers\n    });\n  },\n  addPlayer: player => {\n    set(state => {\n      // Check if player already exists\n      const existingPlayer = state.players.find(p => p.id === player.id);\n      if (existingPlayer) {\n        return state; // Player already exists, don't add duplicate\n      }\n      return {\n        players: [...state.players, player]\n      };\n    });\n  },\n  removePlayer: playerId => {\n    set(state => ({\n      players: state.players.filter(p => p.id !== playerId)\n    }));\n  },\n  setGameState: gameState => {\n    set(state => ({\n      gameState: {\n        ...state.gameState,\n        ...gameState\n      },\n      isGameActive: gameState.game_started !== undefined ? gameState.game_started : state.isGameActive,\n      currentRound: gameState.current_round || state.currentRound,\n      totalRounds: gameState.max_rounds || state.totalRounds,\n      currentWord: gameState.word || state.currentWord,\n      timeRemaining: gameState.time_remaining || state.timeRemaining,\n      currentDrawer: gameState.current_drawer_id || state.currentDrawer,\n      isDrawing: gameState.is_drawer || false\n    }));\n  },\n  setRoundInfo: roundInfo => {\n    set({\n      currentRound: roundInfo.round,\n      totalRounds: roundInfo.totalRounds,\n      timeRemaining: roundInfo.timeRemaining,\n      currentWord: roundInfo.word || '',\n      currentDrawer: roundInfo.drawer,\n      isDrawing: roundInfo.isDrawing || false\n    });\n  },\n  updateTimeRemaining: time => {\n    set({\n      timeRemaining: time\n    });\n  },\n  addDrawingData: data => {\n    set(state => ({\n      drawingData: [...state.drawingData, data]\n    }));\n  },\n  clearDrawing: () => {\n    set({\n      drawingData: []\n    });\n  },\n  sendClearCanvas: () => {\n    const {\n      isSocketConnected\n    } = get();\n    if (isSocketConnected) {\n      socketManager.sendClearCanvas();\n    } else {\n      console.error('Cannot clear canvas: Socket not connected');\n    }\n  },\n  setBrushColor: color => {\n    set({\n      brushColor: color\n    });\n  },\n  setBrushSize: size => {\n    set({\n      brushSize: size\n    });\n  },\n  setDrawingMode: mode => {\n    set({\n      isDrawingMode: mode\n    });\n  },\n  addChatMessage: message => {\n    set(state => ({\n      chatMessages: [...state.chatMessages, message]\n    }));\n  },\n  addChatMessageFromSocket: messageData => {\n    // Format the message data to match the expected structure\n    const formattedMessage = {\n      username: messageData.username || 'Unknown',\n      message: messageData.message || '',\n      timestamp: (messageData.timestamp || Date.now() / 1000) * 1000,\n      // Convert to milliseconds for JavaScript Date\n      isCorrectGuess: false,\n      isSystemMessage: false\n    };\n    set(state => ({\n      chatMessages: [...state.chatMessages, formattedMessage]\n    }));\n  },\n  addCorrectGuessMessage: messageData => {\n    // Format correct guess message\n    const formattedMessage = {\n      username: messageData.username || 'Unknown',\n      message: messageData.message || 'Guessed correctly!',\n      timestamp: Date.now(),\n      isCorrectGuess: true,\n      isSystemMessage: true\n    };\n    set(state => ({\n      chatMessages: [...state.chatMessages, formattedMessage]\n    }));\n  },\n  setGuessInput: input => {\n    set({\n      guessInput: input\n    });\n  },\n  sendGuess: () => {\n    const {\n      guessInput,\n      isSocketConnected\n    } = get();\n    if (guessInput.trim() && isSocketConnected) {\n      socketManager.sendGuess(guessInput.trim());\n      set({\n        guessInput: ''\n      });\n    } else if (!isSocketConnected) {\n      console.error('Cannot send guess: Socket not connected');\n    }\n  },\n  sendChatMessage: message => {\n    const {\n      isSocketConnected\n    } = get();\n    if (isSocketConnected) {\n      socketManager.sendChatMessage(message);\n    } else {\n      console.error('Cannot send chat message: Socket not connected');\n    }\n  },\n  sendDrawData: drawData => {\n    const {\n      isSocketConnected\n    } = get();\n    if (isSocketConnected) {\n      // Add timestamp to drawing data\n      const dataWithTimestamp = {\n        ...drawData,\n        timestamp: Date.now()\n      };\n      socketManager.sendDrawData(dataWithTimestamp.x, dataWithTimestamp.y, dataWithTimestamp.is_drawing, dataWithTimestamp.color, dataWithTimestamp.brush_size, dataWithTimestamp.is_first_point || false);\n    } else {\n      console.error('Cannot send draw data: Socket not connected');\n    }\n  },\n  startGame: () => {\n    const {\n      isSocketConnected\n    } = get();\n    if (isSocketConnected) {\n      socketManager.startGame();\n    } else {\n      console.error('Cannot start game: Socket not connected');\n    }\n  },\n  setReady: ready => {\n    const {\n      isSocketConnected\n    } = get();\n    if (isSocketConnected) {\n      socketManager.setReady(ready);\n    } else {\n      console.error('Cannot set ready status: Socket not connected');\n    }\n  },\n  skipTurn: () => {\n    const {\n      isSocketConnected\n    } = get();\n    if (isSocketConnected) {\n      socketManager.skipTurn();\n    } else {\n      console.error('Cannot skip turn: Socket not connected');\n    }\n  },\n  resetGameState: () => {\n    set({\n      gameState: null,\n      isGameActive: false,\n      currentRound: 0,\n      timeRemaining: 0,\n      currentWord: '',\n      isDrawing: false,\n      currentDrawer: null,\n      drawingData: [],\n      chatMessages: []\n    });\n  },\n  showRoundEndPopup: roundData => {\n    set({\n      showRoundEndPopup: true,\n      roundEndData: roundData\n    });\n  },\n  hideRoundEndPopup: () => {\n    set({\n      showRoundEndPopup: false,\n      roundEndData: null\n    });\n  },\n  showGameEndPopup: gameData => {\n    set({\n      showGameEndPopup: true,\n      gameEndData: gameData\n    });\n  },\n  hideGameEndPopup: () => {\n    set({\n      showGameEndPopup: false,\n      gameEndData: null\n    });\n  },\n  // Socket event handlers\n  handleSocketConnected: data => {\n    set({\n      isSocketConnected: data.connected\n    });\n  },\n  handleAuthenticated: data => {\n    console.log('Authenticated:', data);\n  },\n  handleRoomJoined: data => {\n    set({\n      currentRoom: {\n        id: data.room_id\n      },\n      players: data.players || [],\n      isInRoom: true\n    });\n  },\n  handlePlayerJoined: data => {\n    set(state => {\n      // Check if player already exists\n      const existingPlayer = state.players.find(p => p.id === data.user_id);\n      if (existingPlayer) {\n        return state; // Player already exists, don't add duplicate\n      }\n      return {\n        players: [...state.players, {\n          id: data.user_id,\n          username: data.username,\n          score: 0,\n          ready: false\n        }]\n      };\n    });\n  },\n  handlePlayerLeft: data => {\n    set(state => ({\n      players: state.players.filter(p => p.id !== data.user_id)\n    }));\n  },\n  handleGameStarted: data => {\n    set({\n      isGameActive: true\n    });\n  },\n  handleRoundStarted: data => {\n    set({\n      currentRound: data.round,\n      timeRemaining: data.time_remaining,\n      drawingData: [],\n      // Clear drawing data for new round\n      guessedPlayers: [],\n      // Reset guessed players for new round\n      guessProgress: {\n        guessed: 0,\n        total: 0\n      } // Reset guess progress\n    });\n    console.log('Round started:', data);\n  },\n  handleWordAssigned: data => {\n    set({\n      currentWord: data.word\n    });\n  },\n  handleCorrectGuess: data => {\n    // Add correct guess message to chat\n    get().addCorrectGuessMessage(data);\n\n    // Update guess progress\n    set(state => {\n      const newGuessedPlayers = [...state.guessedPlayers, data.user_id];\n      const nonDrawerPlayers = state.players.filter(p => p.id !== state.currentDrawer);\n      const totalNonDrawers = nonDrawerPlayers.length;\n      const guessedCount = newGuessedPlayers.length;\n      return {\n        guessedPlayers: newGuessedPlayers,\n        guessProgress: {\n          guessed: guessedCount,\n          total: totalNonDrawers\n        }\n      };\n    });\n  },\n  handleAllGuessed: data => {\n    // Add system message about all players guessing\n    const systemMessage = {\n      username: 'System',\n      message: data.message || 'Everyone guessed correctly!',\n      timestamp: Date.now(),\n      isCorrectGuess: false,\n      isSystemMessage: true\n    };\n    set(state => ({\n      chatMessages: [...state.chatMessages, systemMessage]\n    }));\n  },\n  handleRoundEnded: data => {\n    set(state => {\n      // Show round end popup with current player data\n      const roundData = {\n        roundNumber: data.round,\n        word: data.word,\n        players: state.players\n      };\n      console.log('🎯 Round ended, showing popup with data:', roundData);\n      return {\n        currentWord: '',\n        drawingData: [],\n        showRoundEndPopup: true,\n        roundEndData: roundData\n      };\n    });\n    console.log('Round ended:', data);\n  },\n  handleGameEnded: data => {\n    set(state => {\n      // Show game end popup with final scores\n      const gameData = {\n        finalScores: data.final_scores || {},\n        players: state.players\n      };\n      return {\n        isGameActive: false,\n        currentRound: 0,\n        timeRemaining: 0,\n        currentWord: '',\n        drawingData: [],\n        showGameEndPopup: true,\n        gameEndData: gameData\n      };\n    });\n  },\n  handleTimeUpdate: data => {\n    set({\n      timeRemaining: data.time_remaining\n    });\n    console.log('Time update:', data.time_remaining);\n  },\n  handleCanvasCleared: data => {\n    set({\n      drawingData: []\n    });\n  },\n  handleRoomDeleted: data => {\n    set({\n      currentRoom: null,\n      players: [],\n      isInRoom: false,\n      gameState: null,\n      isGameActive: false,\n      chatMessages: [],\n      drawingData: []\n    });\n  },\n  handlePlayersUpdate: data => {\n    set({\n      players: data.players || []\n    });\n  },\n  // Handle incoming drawing data from other players\n  handleDrawData: data => {\n    if (data && data.data) {\n      // Add the received drawing data to the store\n      set(state => ({\n        drawingData: [...state.drawingData, data.data]\n      }));\n    }\n  },\n  // Handle incoming game state updates\n  handleGameState: data => {\n    set(state => ({\n      gameState: {\n        ...state.gameState,\n        ...data\n      },\n      isGameActive: data.game_started !== undefined ? data.game_started : state.isGameActive,\n      currentRound: data.current_round || state.currentRound,\n      totalRounds: data.max_rounds || state.totalRounds,\n      currentWord: data.word || state.currentWord,\n      timeRemaining: data.time_remaining || state.timeRemaining,\n      currentDrawer: data.current_drawer_id || state.currentDrawer,\n      isDrawing: data.is_drawer || false\n    }));\n    console.log('Game state update:', data);\n  }\n}));\nexport default useGameStore;","map":{"version":3,"names":["create","socketManager","useGameStore","set","get","currentRoom","players","isInRoom","gameState","isGameActive","currentRound","totalRounds","timeRemaining","currentWord","isDrawing","currentDrawer","guessedPlayers","guessProgress","guessed","total","drawingData","brushColor","brushSize","isDrawingMode","chatMessages","guessInput","isSocketConnected","isLoading","error","showRoundEndPopup","roundEndData","showGameEndPopup","gameEndData","setSocketConnected","connected","joinRoom","roomId","leaveRoom","deleteRoom","setRoomData","roomData","setPlayers","uniquePlayers","filter","player","index","self","findIndex","p","id","addPlayer","state","existingPlayer","find","removePlayer","playerId","setGameState","game_started","undefined","current_round","max_rounds","word","time_remaining","current_drawer_id","is_drawer","setRoundInfo","roundInfo","round","drawer","updateTimeRemaining","time","addDrawingData","data","clearDrawing","sendClearCanvas","console","setBrushColor","color","setBrushSize","size","setDrawingMode","mode","addChatMessage","message","addChatMessageFromSocket","messageData","formattedMessage","username","timestamp","Date","now","isCorrectGuess","isSystemMessage","addCorrectGuessMessage","setGuessInput","input","sendGuess","trim","sendChatMessage","sendDrawData","drawData","dataWithTimestamp","x","y","is_drawing","brush_size","is_first_point","startGame","setReady","ready","skipTurn","resetGameState","roundData","hideRoundEndPopup","gameData","hideGameEndPopup","handleSocketConnected","handleAuthenticated","log","handleRoomJoined","room_id","handlePlayerJoined","user_id","score","handlePlayerLeft","handleGameStarted","handleRoundStarted","handleWordAssigned","handleCorrectGuess","newGuessedPlayers","nonDrawerPlayers","totalNonDrawers","length","guessedCount","handleAllGuessed","systemMessage","handleRoundEnded","roundNumber","handleGameEnded","finalScores","final_scores","handleTimeUpdate","handleCanvasCleared","handleRoomDeleted","handlePlayersUpdate","handleDrawData","handleGameState"],"sources":["/Users/walid/Documents/Networking/drawsync/frontend/src/store/gameStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport socketManager from '../utils/socket';\n\nconst useGameStore = create((set, get) => ({\n  // Room state\n  currentRoom: null,\n  players: [],\n  isInRoom: false,\n\n  // Game state\n  gameState: null,\n  isGameActive: false,\n  currentRound: 0,\n  totalRounds: 5,\n  timeRemaining: 0,\n  currentWord: '',\n  isDrawing: false,\n  currentDrawer: null,\n  guessedPlayers: [],\n  guessProgress: { guessed: 0, total: 0 },\n\n  // Drawing state\n  drawingData: [],\n  brushColor: '#000000',\n  brushSize: 2,\n  isDrawingMode: false,\n\n  // Chat state\n  chatMessages: [],\n  guessInput: '',\n\n  // Socket state\n  isSocketConnected: false,\n\n  // UI state\n  isLoading: false,\n  error: null,\n  showRoundEndPopup: false,\n  roundEndData: null,\n  showGameEndPopup: false,\n  gameEndData: null,\n\n  // Actions\n  setSocketConnected: (connected) => {\n    set({ isSocketConnected: connected });\n  },\n\n  joinRoom: (roomId) => {\n    set({ isLoading: true, error: null });\n    socketManager.joinRoom(roomId);\n    set({ isInRoom: true, isLoading: false });\n  },\n\n  leaveRoom: () => {\n    socketManager.leaveRoom();\n    set({\n      currentRoom: null,\n      players: [],\n      isInRoom: false,\n      gameState: null,\n      isGameActive: false,\n      chatMessages: [],\n      drawingData: [],\n    });\n  },\n\n  deleteRoom: () => {\n    socketManager.deleteRoom();\n    set({\n      currentRoom: null,\n      players: [],\n      isInRoom: false,\n      gameState: null,\n      isGameActive: false,\n      chatMessages: [],\n      drawingData: [],\n    });\n  },\n\n  setRoomData: (roomData) => {\n    set({ currentRoom: roomData });\n  },\n\n  setPlayers: (players) => {\n    // Ensure players array is unique by ID\n    const uniquePlayers = players.filter((player, index, self) => \n      index === self.findIndex(p => p.id === player.id)\n    );\n    set({ players: uniquePlayers });\n  },\n\n  addPlayer: (player) => {\n    set((state) => {\n      // Check if player already exists\n      const existingPlayer = state.players.find(p => p.id === player.id);\n      if (existingPlayer) {\n        return state; // Player already exists, don't add duplicate\n      }\n      \n      return {\n        players: [...state.players, player],\n      };\n    });\n  },\n\n  removePlayer: (playerId) => {\n    set((state) => ({\n      players: state.players.filter((p) => p.id !== playerId),\n    }));\n  },\n\n  setGameState: (gameState) => {\n    set((state) => ({\n      gameState: { ...state.gameState, ...gameState },\n      isGameActive: gameState.game_started !== undefined ? gameState.game_started : state.isGameActive,\n      currentRound: gameState.current_round || state.currentRound,\n      totalRounds: gameState.max_rounds || state.totalRounds,\n      currentWord: gameState.word || state.currentWord,\n      timeRemaining: gameState.time_remaining || state.timeRemaining,\n      currentDrawer: gameState.current_drawer_id || state.currentDrawer,\n      isDrawing: gameState.is_drawer || false,\n    }));\n  },\n\n  setRoundInfo: (roundInfo) => {\n    set({\n      currentRound: roundInfo.round,\n      totalRounds: roundInfo.totalRounds,\n      timeRemaining: roundInfo.timeRemaining,\n      currentWord: roundInfo.word || '',\n      currentDrawer: roundInfo.drawer,\n      isDrawing: roundInfo.isDrawing || false,\n    });\n  },\n\n  updateTimeRemaining: (time) => {\n    set({ timeRemaining: time });\n  },\n\n  addDrawingData: (data) => {\n    set((state) => ({\n      drawingData: [...state.drawingData, data],\n    }));\n  },\n\n  clearDrawing: () => {\n    set({ drawingData: [] });\n  },\n\n  sendClearCanvas: () => {\n    const { isSocketConnected } = get();\n    if (isSocketConnected) {\n      socketManager.sendClearCanvas();\n    } else {\n      console.error('Cannot clear canvas: Socket not connected');\n    }\n  },\n\n  setBrushColor: (color) => {\n    set({ brushColor: color });\n  },\n\n  setBrushSize: (size) => {\n    set({ brushSize: size });\n  },\n\n  setDrawingMode: (mode) => {\n    set({ isDrawingMode: mode });\n  },\n\n  addChatMessage: (message) => {\n    set((state) => ({\n      chatMessages: [...state.chatMessages, message],\n    }));\n  },\n\n  addChatMessageFromSocket: (messageData) => {\n    // Format the message data to match the expected structure\n    const formattedMessage = {\n      username: messageData.username || 'Unknown',\n      message: messageData.message || '',\n      timestamp: (messageData.timestamp || Date.now() / 1000) * 1000, // Convert to milliseconds for JavaScript Date\n      isCorrectGuess: false,\n      isSystemMessage: false,\n    };\n    \n    set((state) => ({\n      chatMessages: [...state.chatMessages, formattedMessage],\n    }));\n  },\n\n  addCorrectGuessMessage: (messageData) => {\n    // Format correct guess message\n    const formattedMessage = {\n      username: messageData.username || 'Unknown',\n      message: messageData.message || 'Guessed correctly!',\n      timestamp: Date.now(),\n      isCorrectGuess: true,\n      isSystemMessage: true,\n    };\n    \n    set((state) => ({\n      chatMessages: [...state.chatMessages, formattedMessage],\n    }));\n  },\n\n  setGuessInput: (input) => {\n    set({ guessInput: input });\n  },\n\n  sendGuess: () => {\n    const { guessInput, isSocketConnected } = get();\n    if (guessInput.trim() && isSocketConnected) {\n      socketManager.sendGuess(guessInput.trim());\n      set({ guessInput: '' });\n    } else if (!isSocketConnected) {\n      console.error('Cannot send guess: Socket not connected');\n    }\n  },\n\n  sendChatMessage: (message) => {\n    const { isSocketConnected } = get();\n    if (isSocketConnected) {\n      socketManager.sendChatMessage(message);\n    } else {\n      console.error('Cannot send chat message: Socket not connected');\n    }\n  },\n\n  sendDrawData: (drawData) => {\n    const { isSocketConnected } = get();\n    if (isSocketConnected) {\n      // Add timestamp to drawing data\n      const dataWithTimestamp = {\n        ...drawData,\n        timestamp: Date.now()\n      };\n      socketManager.sendDrawData(\n        dataWithTimestamp.x,\n        dataWithTimestamp.y,\n        dataWithTimestamp.is_drawing,\n        dataWithTimestamp.color,\n        dataWithTimestamp.brush_size,\n        dataWithTimestamp.is_first_point || false\n      );\n    } else {\n      console.error('Cannot send draw data: Socket not connected');\n    }\n  },\n\n  startGame: () => {\n    const { isSocketConnected } = get();\n    if (isSocketConnected) {\n      socketManager.startGame();\n    } else {\n      console.error('Cannot start game: Socket not connected');\n    }\n  },\n\n  setReady: (ready) => {\n    const { isSocketConnected } = get();\n    if (isSocketConnected) {\n      socketManager.setReady(ready);\n    } else {\n      console.error('Cannot set ready status: Socket not connected');\n    }\n  },\n\n  skipTurn: () => {\n    const { isSocketConnected } = get();\n    if (isSocketConnected) {\n      socketManager.skipTurn();\n    } else {\n      console.error('Cannot skip turn: Socket not connected');\n    }\n  },\n\n  resetGameState: () => {\n    set({\n      gameState: null,\n      isGameActive: false,\n      currentRound: 0,\n      timeRemaining: 0,\n      currentWord: '',\n      isDrawing: false,\n      currentDrawer: null,\n      drawingData: [],\n      chatMessages: [],\n    });\n  },\n\n  showRoundEndPopup: (roundData) => {\n    set({\n      showRoundEndPopup: true,\n      roundEndData: roundData,\n    });\n  },\n\n  hideRoundEndPopup: () => {\n    set({\n      showRoundEndPopup: false,\n      roundEndData: null,\n    });\n  },\n\n  showGameEndPopup: (gameData) => {\n    set({\n      showGameEndPopup: true,\n      gameEndData: gameData,\n    });\n  },\n\n  hideGameEndPopup: () => {\n    set({\n      showGameEndPopup: false,\n      gameEndData: null,\n    });\n  },\n\n  // Socket event handlers\n  handleSocketConnected: (data) => {\n    set({ isSocketConnected: data.connected });\n  },\n\n  handleAuthenticated: (data) => {\n    console.log('Authenticated:', data);\n  },\n\n  handleRoomJoined: (data) => {\n    set({\n      currentRoom: { id: data.room_id },\n      players: data.players || [],\n      isInRoom: true,\n    });\n  },\n\n  handlePlayerJoined: (data) => {\n    set((state) => {\n      // Check if player already exists\n      const existingPlayer = state.players.find(p => p.id === data.user_id);\n      if (existingPlayer) {\n        return state; // Player already exists, don't add duplicate\n      }\n      \n      return {\n        players: [...state.players, {\n          id: data.user_id,\n          username: data.username,\n          score: 0,\n          ready: false,\n        }],\n      };\n    });\n  },\n\n  handlePlayerLeft: (data) => {\n    set((state) => ({\n      players: state.players.filter((p) => p.id !== data.user_id),\n    }));\n  },\n\n  handleGameStarted: (data) => {\n    set({ isGameActive: true });\n  },\n\n  handleRoundStarted: (data) => {\n    set({\n      currentRound: data.round,\n      timeRemaining: data.time_remaining,\n      drawingData: [], // Clear drawing data for new round\n      guessedPlayers: [], // Reset guessed players for new round\n      guessProgress: { guessed: 0, total: 0 }, // Reset guess progress\n    });\n    console.log('Round started:', data);\n  },\n\n  handleWordAssigned: (data) => {\n    set({\n      currentWord: data.word,\n    });\n  },\n\n  handleCorrectGuess: (data) => {\n    // Add correct guess message to chat\n    get().addCorrectGuessMessage(data);\n    \n    // Update guess progress\n    set((state) => {\n      const newGuessedPlayers = [...state.guessedPlayers, data.user_id];\n      const nonDrawerPlayers = state.players.filter(p => p.id !== state.currentDrawer);\n      const totalNonDrawers = nonDrawerPlayers.length;\n      const guessedCount = newGuessedPlayers.length;\n      \n      return {\n        guessedPlayers: newGuessedPlayers,\n        guessProgress: {\n          guessed: guessedCount,\n          total: totalNonDrawers\n        }\n      };\n    });\n  },\n\n  handleAllGuessed: (data) => {\n    // Add system message about all players guessing\n    const systemMessage = {\n      username: 'System',\n      message: data.message || 'Everyone guessed correctly!',\n      timestamp: Date.now(),\n      isCorrectGuess: false,\n      isSystemMessage: true,\n    };\n    \n    set((state) => ({\n      chatMessages: [...state.chatMessages, systemMessage],\n    }));\n  },\n\n  handleRoundEnded: (data) => {\n    set((state) => {\n      // Show round end popup with current player data\n      const roundData = {\n        roundNumber: data.round,\n        word: data.word,\n        players: state.players,\n      };\n      \n      console.log('🎯 Round ended, showing popup with data:', roundData);\n      \n      return {\n        currentWord: '',\n        drawingData: [],\n        showRoundEndPopup: true,\n        roundEndData: roundData,\n      };\n    });\n    \n    console.log('Round ended:', data);\n  },\n\n  handleGameEnded: (data) => {\n    set((state) => {\n      // Show game end popup with final scores\n      const gameData = {\n        finalScores: data.final_scores || {},\n        players: state.players,\n      };\n      \n      return {\n        isGameActive: false,\n        currentRound: 0,\n        timeRemaining: 0,\n        currentWord: '',\n        drawingData: [],\n        showGameEndPopup: true,\n        gameEndData: gameData,\n      };\n    });\n  },\n\n  handleTimeUpdate: (data) => {\n    set({ timeRemaining: data.time_remaining });\n    console.log('Time update:', data.time_remaining);\n  },\n\n  handleCanvasCleared: (data) => {\n    set({ drawingData: [] });\n  },\n\n  handleRoomDeleted: (data) => {\n    set({\n      currentRoom: null,\n      players: [],\n      isInRoom: false,\n      gameState: null,\n      isGameActive: false,\n      chatMessages: [],\n      drawingData: [],\n    });\n  },\n\n  handlePlayersUpdate: (data) => {\n    set({ players: data.players || [] });\n  },\n\n  // Handle incoming drawing data from other players\n  handleDrawData: (data) => {\n    if (data && data.data) {\n      // Add the received drawing data to the store\n      set((state) => ({\n        drawingData: [...state.drawingData, data.data],\n      }));\n    }\n  },\n\n  // Handle incoming game state updates\n  handleGameState: (data) => {\n    set((state) => ({\n      gameState: { ...state.gameState, ...data },\n      isGameActive: data.game_started !== undefined ? data.game_started : state.isGameActive,\n      currentRound: data.current_round || state.currentRound,\n      totalRounds: data.max_rounds || state.totalRounds,\n      currentWord: data.word || state.currentWord,\n      timeRemaining: data.time_remaining || state.timeRemaining,\n      currentDrawer: data.current_drawer_id || state.currentDrawer,\n      isDrawing: data.is_drawer || false,\n    }));\n    console.log('Game state update:', data);\n  },\n}));\n\nexport default useGameStore; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}