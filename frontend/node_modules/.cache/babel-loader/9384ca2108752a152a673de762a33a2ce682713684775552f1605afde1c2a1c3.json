{"ast":null,"code":"var _jsxFileName = \"/Users/walid/Documents/Networking/drawsync/frontend/src/components/DrawingCanvas.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport useGameStore from '../store/gameStore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DrawingCanvas = ({\n  width = 800,\n  height = 600\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [lastX, setLastX] = useState(0);\n  const [lastY, setLastY] = useState(0);\n  const {\n    isDrawingMode,\n    brushColor,\n    brushSize,\n    drawingData,\n    addDrawingData,\n    sendDrawData,\n    currentDrawer,\n    user\n  } = useGameStore();\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size\n    canvas.width = width;\n    canvas.height = height;\n\n    // Set default styles\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, width, height);\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n  }, [width, height]);\n\n  // Draw received drawing data\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    drawingData.forEach(data => {\n      if (data.is_drawing) {\n        ctx.strokeStyle = data.color;\n        ctx.lineWidth = data.brush_size;\n        ctx.beginPath();\n        ctx.moveTo(data.x, data.y);\n        ctx.lineTo(data.x, data.y);\n        ctx.stroke();\n      }\n    });\n  }, [drawingData]);\n  const getMousePos = e => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    return {\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top\n    };\n  };\n  const getTouchPos = e => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const touch = e.touches[0];\n    return {\n      x: touch.clientX - rect.left,\n      y: touch.clientY - rect.top\n    };\n  };\n  const startDrawing = (x, y) => {\n    if (!isDrawingMode || (currentDrawer === null || currentDrawer === void 0 ? void 0 : currentDrawer.id) !== (user === null || user === void 0 ? void 0 : user.id)) return;\n    setIsDrawing(true);\n    setLastX(x);\n    setLastY(y);\n  };\n  const draw = (x, y) => {\n    if (!isDrawing || !isDrawingMode || (currentDrawer === null || currentDrawer === void 0 ? void 0 : currentDrawer.id) !== (user === null || user === void 0 ? void 0 : user.id)) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.strokeStyle = brushColor;\n    ctx.lineWidth = brushSize;\n    ctx.beginPath();\n    ctx.moveTo(lastX, lastY);\n    ctx.lineTo(x, y);\n    ctx.stroke();\n\n    // Send drawing data to server\n    const drawData = {\n      x,\n      y,\n      is_drawing: true,\n      color: brushColor,\n      brush_size: brushSize\n    };\n    sendDrawData(drawData);\n    addDrawingData(drawData);\n    setLastX(x);\n    setLastY(y);\n  };\n  const stopDrawing = () => {\n    if (!isDrawingMode || (currentDrawer === null || currentDrawer === void 0 ? void 0 : currentDrawer.id) !== (user === null || user === void 0 ? void 0 : user.id)) return;\n    setIsDrawing(false);\n\n    // Send stop drawing signal\n    const drawData = {\n      x: lastX,\n      y: lastY,\n      is_drawing: false,\n      color: brushColor,\n      brush_size: brushSize\n    };\n    sendDrawData(drawData);\n  };\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, width, height);\n  };\n\n  // Mouse events\n  const handleMouseDown = e => {\n    const pos = getMousePos(e);\n    startDrawing(pos.x, pos.y);\n  };\n  const handleMouseMove = e => {\n    const pos = getMousePos(e);\n    draw(pos.x, pos.y);\n  };\n  const handleMouseUp = () => {\n    stopDrawing();\n  };\n  const handleMouseLeave = () => {\n    stopDrawing();\n  };\n\n  // Touch events\n  const handleTouchStart = e => {\n    e.preventDefault();\n    const pos = getTouchPos(e);\n    startDrawing(pos.x, pos.y);\n  };\n  const handleTouchMove = e => {\n    e.preventDefault();\n    const pos = getTouchPos(e);\n    draw(pos.x, pos.y);\n  };\n  const handleTouchEnd = e => {\n    e.preventDefault();\n    stopDrawing();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      className: \"border-2 border-gray-300 rounded-lg cursor-crosshair bg-white\",\n      onMouseDown: handleMouseDown,\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      onMouseLeave: handleMouseLeave,\n      onTouchStart: handleTouchStart,\n      onTouchMove: handleTouchMove,\n      onTouchEnd: handleTouchEnd,\n      style: {\n        width: `${width}px`,\n        height: `${height}px`,\n        maxWidth: '100%',\n        maxHeight: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 7\n    }, this), !isDrawingMode && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 rounded-lg\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-white text-lg font-medium\",\n        children: (currentDrawer === null || currentDrawer === void 0 ? void 0 : currentDrawer.id) === (user === null || user === void 0 ? void 0 : user.id) ? \"You are drawing!\" : `${(currentDrawer === null || currentDrawer === void 0 ? void 0 : currentDrawer.username) || 'Someone'} is drawing...`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n};\n_s(DrawingCanvas, \"ZpMQ0Rx8hkdhXkANEUVuHO3qgo0=\", false, function () {\n  return [useGameStore];\n});\n_c = DrawingCanvas;\nexport default DrawingCanvas;\nvar _c;\n$RefreshReg$(_c, \"DrawingCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useGameStore","jsxDEV","_jsxDEV","DrawingCanvas","width","height","_s","canvasRef","isDrawing","setIsDrawing","lastX","setLastX","lastY","setLastY","isDrawingMode","brushColor","brushSize","drawingData","addDrawingData","sendDrawData","currentDrawer","user","canvas","current","ctx","getContext","fillStyle","fillRect","lineCap","lineJoin","forEach","data","is_drawing","strokeStyle","color","lineWidth","brush_size","beginPath","moveTo","x","y","lineTo","stroke","getMousePos","e","rect","getBoundingClientRect","clientX","left","clientY","top","getTouchPos","touch","touches","startDrawing","id","draw","drawData","stopDrawing","clearCanvas","handleMouseDown","pos","handleMouseMove","handleMouseUp","handleMouseLeave","handleTouchStart","preventDefault","handleTouchMove","handleTouchEnd","className","children","ref","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","onTouchStart","onTouchMove","onTouchEnd","style","maxWidth","maxHeight","fileName","_jsxFileName","lineNumber","columnNumber","username","_c","$RefreshReg$"],"sources":["/Users/walid/Documents/Networking/drawsync/frontend/src/components/DrawingCanvas.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport useGameStore from '../store/gameStore';\n\nconst DrawingCanvas = ({ width = 800, height = 600 }) => {\n  const canvasRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [lastX, setLastX] = useState(0);\n  const [lastY, setLastY] = useState(0);\n\n  const {\n    isDrawingMode,\n    brushColor,\n    brushSize,\n    drawingData,\n    addDrawingData,\n    sendDrawData,\n    currentDrawer,\n    user,\n  } = useGameStore();\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    // Set canvas size\n    canvas.width = width;\n    canvas.height = height;\n    \n    // Set default styles\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, width, height);\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n  }, [width, height]);\n\n  // Draw received drawing data\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    drawingData.forEach((data) => {\n      if (data.is_drawing) {\n        ctx.strokeStyle = data.color;\n        ctx.lineWidth = data.brush_size;\n        ctx.beginPath();\n        ctx.moveTo(data.x, data.y);\n        ctx.lineTo(data.x, data.y);\n        ctx.stroke();\n      }\n    });\n  }, [drawingData]);\n\n  const getMousePos = (e) => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    return {\n      x: e.clientX - rect.left,\n      y: e.clientY - rect.top,\n    };\n  };\n\n  const getTouchPos = (e) => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const touch = e.touches[0];\n    return {\n      x: touch.clientX - rect.left,\n      y: touch.clientY - rect.top,\n    };\n  };\n\n  const startDrawing = (x, y) => {\n    if (!isDrawingMode || currentDrawer?.id !== user?.id) return;\n    \n    setIsDrawing(true);\n    setLastX(x);\n    setLastY(y);\n  };\n\n  const draw = (x, y) => {\n    if (!isDrawing || !isDrawingMode || currentDrawer?.id !== user?.id) return;\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    ctx.strokeStyle = brushColor;\n    ctx.lineWidth = brushSize;\n    ctx.beginPath();\n    ctx.moveTo(lastX, lastY);\n    ctx.lineTo(x, y);\n    ctx.stroke();\n\n    // Send drawing data to server\n    const drawData = {\n      x,\n      y,\n      is_drawing: true,\n      color: brushColor,\n      brush_size: brushSize,\n    };\n\n    sendDrawData(drawData);\n    addDrawingData(drawData);\n\n    setLastX(x);\n    setLastY(y);\n  };\n\n  const stopDrawing = () => {\n    if (!isDrawingMode || currentDrawer?.id !== user?.id) return;\n    \n    setIsDrawing(false);\n    \n    // Send stop drawing signal\n    const drawData = {\n      x: lastX,\n      y: lastY,\n      is_drawing: false,\n      color: brushColor,\n      brush_size: brushSize,\n    };\n\n    sendDrawData(drawData);\n  };\n\n  const clearCanvas = () => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, width, height);\n  };\n\n  // Mouse events\n  const handleMouseDown = (e) => {\n    const pos = getMousePos(e);\n    startDrawing(pos.x, pos.y);\n  };\n\n  const handleMouseMove = (e) => {\n    const pos = getMousePos(e);\n    draw(pos.x, pos.y);\n  };\n\n  const handleMouseUp = () => {\n    stopDrawing();\n  };\n\n  const handleMouseLeave = () => {\n    stopDrawing();\n  };\n\n  // Touch events\n  const handleTouchStart = (e) => {\n    e.preventDefault();\n    const pos = getTouchPos(e);\n    startDrawing(pos.x, pos.y);\n  };\n\n  const handleTouchMove = (e) => {\n    e.preventDefault();\n    const pos = getTouchPos(e);\n    draw(pos.x, pos.y);\n  };\n\n  const handleTouchEnd = (e) => {\n    e.preventDefault();\n    stopDrawing();\n  };\n\n  return (\n    <div className=\"relative\">\n      <canvas\n        ref={canvasRef}\n        className=\"border-2 border-gray-300 rounded-lg cursor-crosshair bg-white\"\n        onMouseDown={handleMouseDown}\n        onMouseMove={handleMouseMove}\n        onMouseUp={handleMouseUp}\n        onMouseLeave={handleMouseLeave}\n        onTouchStart={handleTouchStart}\n        onTouchMove={handleTouchMove}\n        onTouchEnd={handleTouchEnd}\n        style={{\n          width: `${width}px`,\n          height: `${height}px`,\n          maxWidth: '100%',\n          maxHeight: '100%',\n        }}\n      />\n      \n      {!isDrawingMode && (\n        <div className=\"absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 rounded-lg\">\n          <p className=\"text-white text-lg font-medium\">\n            {currentDrawer?.id === user?.id \n              ? \"You are drawing!\" \n              : `${currentDrawer?.username || 'Someone'} is drawing...`\n            }\n          </p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DrawingCanvas; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}