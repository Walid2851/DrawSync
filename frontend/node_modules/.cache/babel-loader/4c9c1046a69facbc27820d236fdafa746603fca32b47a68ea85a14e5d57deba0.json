{"ast":null,"code":"import { create } from 'zustand';\nimport socketManager from '../utils/socket';\nconst useGameStore = create((set, get) => ({\n  // Room state\n  currentRoom: null,\n  players: [],\n  isInRoom: false,\n  // Game state\n  gameState: null,\n  isGameActive: false,\n  currentRound: 0,\n  totalRounds: 5,\n  timeRemaining: 0,\n  currentWord: '',\n  isDrawing: false,\n  currentDrawer: null,\n  // Drawing state\n  drawingData: [],\n  brushColor: '#000000',\n  brushSize: 2,\n  isDrawingMode: false,\n  // Chat state\n  chatMessages: [],\n  guessInput: '',\n  // Socket state\n  isSocketConnected: false,\n  // UI state\n  isLoading: false,\n  error: null,\n  // Actions\n  setSocketConnected: connected => {\n    set({\n      isSocketConnected: connected\n    });\n  },\n  joinRoom: roomId => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    socketManager.joinRoom(roomId);\n    set({\n      isInRoom: true,\n      isLoading: false\n    });\n  },\n  leaveRoom: () => {\n    socketManager.leaveRoom();\n    set({\n      currentRoom: null,\n      players: [],\n      isInRoom: false,\n      gameState: null,\n      isGameActive: false,\n      chatMessages: [],\n      drawingData: []\n    });\n  },\n  setRoomData: roomData => {\n    set({\n      currentRoom: roomData\n    });\n  },\n  setPlayers: players => {\n    set({\n      players\n    });\n  },\n  addPlayer: player => {\n    set(state => ({\n      players: [...state.players, player]\n    }));\n  },\n  removePlayer: playerId => {\n    set(state => ({\n      players: state.players.filter(p => p.id !== playerId)\n    }));\n  },\n  setGameState: gameState => {\n    set(state => ({\n      gameState: {\n        ...state.gameState,\n        ...gameState\n      },\n      isGameActive: gameState.isGameActive !== undefined ? gameState.isGameActive : state.isGameActive\n    }));\n  },\n  setRoundInfo: roundInfo => {\n    set({\n      currentRound: roundInfo.round,\n      totalRounds: roundInfo.totalRounds,\n      timeRemaining: roundInfo.timeRemaining,\n      currentWord: roundInfo.word || '',\n      currentDrawer: roundInfo.drawer,\n      isDrawing: roundInfo.isDrawing || false\n    });\n  },\n  updateTimeRemaining: time => {\n    set({\n      timeRemaining: time\n    });\n  },\n  addDrawingData: data => {\n    set(state => ({\n      drawingData: [...state.drawingData, data]\n    }));\n  },\n  clearDrawing: () => {\n    set({\n      drawingData: []\n    });\n  },\n  setBrushColor: color => {\n    set({\n      brushColor: color\n    });\n  },\n  setBrushSize: size => {\n    set({\n      brushSize: size\n    });\n  },\n  setDrawingMode: mode => {\n    set({\n      isDrawingMode: mode\n    });\n  },\n  addChatMessage: message => {\n    set(state => ({\n      chatMessages: [...state.chatMessages, message]\n    }));\n  },\n  addChatMessageFromSocket: messageData => {\n    set(state => ({\n      chatMessages: [...state.chatMessages, messageData]\n    }));\n  },\n  setGuessInput: input => {\n    set({\n      guessInput: input\n    });\n  },\n  sendGuess: () => {\n    const {\n      guessInput,\n      isSocketConnected\n    } = get();\n    if (guessInput.trim() && isSocketConnected) {\n      socketManager.sendGuess({\n        guess: guessInput.trim()\n      });\n      set({\n        guessInput: ''\n      });\n    } else if (!isSocketConnected) {\n      console.error('Cannot send guess: Socket not connected');\n    }\n  },\n  sendChatMessage: message => {\n    const {\n      isSocketConnected\n    } = get();\n    if (isSocketConnected) {\n      socketManager.sendChatMessage({\n        message\n      });\n    } else {\n      console.error('Cannot send chat message: Socket not connected');\n    }\n  },\n  sendDrawData: drawData => {\n    const {\n      isSocketConnected\n    } = get();\n    if (isSocketConnected) {\n      socketManager.sendDrawData(drawData);\n    } else {\n      console.error('Cannot send draw data: Socket not connected');\n    }\n  },\n  setReady: ready => {\n    const {\n      isSocketConnected\n    } = get();\n    if (isSocketConnected) {\n      socketManager.setReady(ready);\n    } else {\n      console.error('Cannot set ready status: Socket not connected');\n    }\n  },\n  setError: error => {\n    set({\n      error\n    });\n  },\n  clearError: () => {\n    set({\n      error: null\n    });\n  },\n  resetGame: () => {\n    set({\n      gameState: null,\n      isGameActive: false,\n      currentRound: 0,\n      timeRemaining: 0,\n      currentWord: '',\n      isDrawing: false,\n      currentDrawer: null,\n      drawingData: [],\n      chatMessages: [],\n      guessInput: '',\n      isDrawingMode: false\n    });\n  }\n}));\nexport default useGameStore;","map":{"version":3,"names":["create","socketManager","useGameStore","set","get","currentRoom","players","isInRoom","gameState","isGameActive","currentRound","totalRounds","timeRemaining","currentWord","isDrawing","currentDrawer","drawingData","brushColor","brushSize","isDrawingMode","chatMessages","guessInput","isSocketConnected","isLoading","error","setSocketConnected","connected","joinRoom","roomId","leaveRoom","setRoomData","roomData","setPlayers","addPlayer","player","state","removePlayer","playerId","filter","p","id","setGameState","undefined","setRoundInfo","roundInfo","round","word","drawer","updateTimeRemaining","time","addDrawingData","data","clearDrawing","setBrushColor","color","setBrushSize","size","setDrawingMode","mode","addChatMessage","message","addChatMessageFromSocket","messageData","setGuessInput","input","sendGuess","trim","guess","console","sendChatMessage","sendDrawData","drawData","setReady","ready","setError","clearError","resetGame"],"sources":["/Users/walid/Documents/Networking/drawsync/frontend/src/store/gameStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport socketManager from '../utils/socket';\n\nconst useGameStore = create((set, get) => ({\n  // Room state\n  currentRoom: null,\n  players: [],\n  isInRoom: false,\n\n  // Game state\n  gameState: null,\n  isGameActive: false,\n  currentRound: 0,\n  totalRounds: 5,\n  timeRemaining: 0,\n  currentWord: '',\n  isDrawing: false,\n  currentDrawer: null,\n\n  // Drawing state\n  drawingData: [],\n  brushColor: '#000000',\n  brushSize: 2,\n  isDrawingMode: false,\n\n  // Chat state\n  chatMessages: [],\n  guessInput: '',\n\n  // Socket state\n  isSocketConnected: false,\n\n  // UI state\n  isLoading: false,\n  error: null,\n\n  // Actions\n  setSocketConnected: (connected) => {\n    set({ isSocketConnected: connected });\n  },\n\n  joinRoom: (roomId) => {\n    set({ isLoading: true, error: null });\n    socketManager.joinRoom(roomId);\n    set({ isInRoom: true, isLoading: false });\n  },\n\n  leaveRoom: () => {\n    socketManager.leaveRoom();\n    set({\n      currentRoom: null,\n      players: [],\n      isInRoom: false,\n      gameState: null,\n      isGameActive: false,\n      chatMessages: [],\n      drawingData: [],\n    });\n  },\n\n  setRoomData: (roomData) => {\n    set({ currentRoom: roomData });\n  },\n\n  setPlayers: (players) => {\n    set({ players });\n  },\n\n  addPlayer: (player) => {\n    set((state) => ({\n      players: [...state.players, player],\n    }));\n  },\n\n  removePlayer: (playerId) => {\n    set((state) => ({\n      players: state.players.filter((p) => p.id !== playerId),\n    }));\n  },\n\n  setGameState: (gameState) => {\n    set((state) => ({\n      gameState: { ...state.gameState, ...gameState },\n      isGameActive: gameState.isGameActive !== undefined ? gameState.isGameActive : state.isGameActive,\n    }));\n  },\n\n  setRoundInfo: (roundInfo) => {\n    set({\n      currentRound: roundInfo.round,\n      totalRounds: roundInfo.totalRounds,\n      timeRemaining: roundInfo.timeRemaining,\n      currentWord: roundInfo.word || '',\n      currentDrawer: roundInfo.drawer,\n      isDrawing: roundInfo.isDrawing || false,\n    });\n  },\n\n  updateTimeRemaining: (time) => {\n    set({ timeRemaining: time });\n  },\n\n  addDrawingData: (data) => {\n    set((state) => ({\n      drawingData: [...state.drawingData, data],\n    }));\n  },\n\n  clearDrawing: () => {\n    set({ drawingData: [] });\n  },\n\n  setBrushColor: (color) => {\n    set({ brushColor: color });\n  },\n\n  setBrushSize: (size) => {\n    set({ brushSize: size });\n  },\n\n  setDrawingMode: (mode) => {\n    set({ isDrawingMode: mode });\n  },\n\n  addChatMessage: (message) => {\n    set((state) => ({\n      chatMessages: [...state.chatMessages, message],\n    }));\n  },\n\n  addChatMessageFromSocket: (messageData) => {\n    set((state) => ({\n      chatMessages: [...state.chatMessages, messageData],\n    }));\n  },\n\n  setGuessInput: (input) => {\n    set({ guessInput: input });\n  },\n\n  sendGuess: () => {\n    const { guessInput, isSocketConnected } = get();\n    if (guessInput.trim() && isSocketConnected) {\n      socketManager.sendGuess({ guess: guessInput.trim() });\n      set({ guessInput: '' });\n    } else if (!isSocketConnected) {\n      console.error('Cannot send guess: Socket not connected');\n    }\n  },\n\n  sendChatMessage: (message) => {\n    const { isSocketConnected } = get();\n    if (isSocketConnected) {\n      socketManager.sendChatMessage({ message });\n    } else {\n      console.error('Cannot send chat message: Socket not connected');\n    }\n  },\n\n  sendDrawData: (drawData) => {\n    const { isSocketConnected } = get();\n    if (isSocketConnected) {\n      socketManager.sendDrawData(drawData);\n    } else {\n      console.error('Cannot send draw data: Socket not connected');\n    }\n  },\n\n  setReady: (ready) => {\n    const { isSocketConnected } = get();\n    if (isSocketConnected) {\n      socketManager.setReady(ready);\n    } else {\n      console.error('Cannot set ready status: Socket not connected');\n    }\n  },\n\n  setError: (error) => {\n    set({ error });\n  },\n\n  clearError: () => {\n    set({ error: null });\n  },\n\n  resetGame: () => {\n    set({\n      gameState: null,\n      isGameActive: false,\n      currentRound: 0,\n      timeRemaining: 0,\n      currentWord: '',\n      isDrawing: false,\n      currentDrawer: null,\n      drawingData: [],\n      chatMessages: [],\n      guessInput: '',\n      isDrawingMode: false,\n    });\n  },\n}));\n\nexport default useGameStore; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}