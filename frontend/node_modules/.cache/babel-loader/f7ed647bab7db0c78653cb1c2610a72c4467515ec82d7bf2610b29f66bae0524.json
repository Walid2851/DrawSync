{"ast":null,"code":"var _jsxFileName = \"/Users/walid/Documents/Networking/drawsync/frontend/src/components/DrawingCanvas.jsx\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport useGameStore from '../store/gameStore';\nimport useAuthStore from '../store/authStore';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DrawingCanvas = ({\n  width = 800,\n  height = 600\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [lastX, setLastX] = useState(0);\n  const [lastY, setLastY] = useState(0);\n  const [currentStroke, setCurrentStroke] = useState([]);\n  const [lastDrawingDataLength, setLastDrawingDataLength] = useState(0);\n  const {\n    user\n  } = useAuthStore();\n  const {\n    isDrawingMode,\n    brushColor,\n    brushSize,\n    drawingData,\n    addDrawingData,\n    sendDrawData,\n    currentDrawer,\n    isGameActive,\n    gameState,\n    clearDrawing,\n    sendClearCanvas\n  } = useGameStore();\n\n  // Check if current user is the drawer\n  const isCurrentDrawer = (gameState === null || gameState === void 0 ? void 0 : gameState.current_drawer_id) === (user === null || user === void 0 ? void 0 : user.id) || false;\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n\n    // Set canvas size\n    canvas.width = width;\n    canvas.height = height;\n\n    // Set default styles\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, width, height);\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n  }, [width, height]);\n\n  // Clear canvas when game starts new round or drawing data is cleared\n  useEffect(() => {\n    if (isGameActive && gameState !== null && gameState !== void 0 && gameState.current_round) {\n      clearCanvas();\n      clearDrawing();\n    }\n  }, [gameState === null || gameState === void 0 ? void 0 : gameState.current_round, isGameActive]);\n\n  // Clear canvas when drawing data is cleared\n  useEffect(() => {\n    if (drawingData.length === 0 && isGameActive) {\n      clearCanvas();\n    }\n  }, [drawingData.length, isGameActive]);\n\n  // Add document-level mouse up handler to stop drawing when mouse is released outside canvas\n  useEffect(() => {\n    const handleDocumentMouseUp = () => {\n      if (isDrawing) {\n        stopDrawing();\n      }\n    };\n    document.addEventListener('mouseup', handleDocumentMouseUp);\n    return () => {\n      document.removeEventListener('mouseup', handleDocumentMouseUp);\n    };\n  }, [isDrawing, stopDrawing]);\n\n  // Improved drawing data processing - redraw entire canvas for proper synchronization\n  useEffect(() => {\n    if (drawingData.length > 0) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n\n      // Clear canvas first\n      ctx.fillStyle = 'white';\n      ctx.fillRect(0, 0, width, height);\n\n      // Group drawing data by user to handle strokes properly\n      const strokesByUser = {};\n      drawingData.forEach(data => {\n        if (!strokesByUser[data.user_id]) {\n          strokesByUser[data.user_id] = [];\n        }\n        strokesByUser[data.user_id].push(data);\n      });\n\n      // Draw each user's strokes\n      Object.values(strokesByUser).forEach(userStrokes => {\n        if (userStrokes.length === 0) return;\n\n        // Sort strokes by timestamp\n        const sortedStrokes = userStrokes.sort((a, b) => {\n          return (a.timestamp || 0) - (b.timestamp || 0);\n        });\n\n        // Draw the stroke\n        ctx.strokeStyle = sortedStrokes[0].color || '#000000';\n        ctx.lineWidth = sortedStrokes[0].brush_size || 2;\n        ctx.lineCap = 'round';\n        ctx.lineJoin = 'round';\n        ctx.beginPath();\n        let isFirstPoint = true;\n        for (let i = 0; i < sortedStrokes.length; i++) {\n          const stroke = sortedStrokes[i];\n          if (stroke.is_drawing) {\n            if (isFirstPoint || stroke.is_first_point) {\n              ctx.moveTo(stroke.x, stroke.y);\n              isFirstPoint = false;\n            } else {\n              ctx.lineTo(stroke.x, stroke.y);\n            }\n          } else {\n            // End the current stroke\n            ctx.stroke();\n            ctx.beginPath();\n            isFirstPoint = true;\n          }\n        }\n\n        // Stroke the final path\n        if (!isFirstPoint) {\n          ctx.stroke();\n        }\n      });\n      setLastDrawingDataLength(drawingData.length);\n    }\n  }, [drawingData, width, height]);\n  const getMousePos = useCallback(e => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n    return {\n      x: (e.clientX - rect.left) * scaleX,\n      y: (e.clientY - rect.top) * scaleY\n    };\n  }, []);\n  const getTouchPos = useCallback(e => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const touch = e.touches[0];\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n    return {\n      x: (touch.clientX - rect.left) * scaleX,\n      y: (touch.clientY - rect.top) * scaleY\n    };\n  }, []);\n  const startDrawing = useCallback((x, y) => {\n    if (!isGameActive || !isCurrentDrawer) return;\n    setIsDrawing(true);\n    setLastX(x);\n    setLastY(y);\n    setCurrentStroke([{\n      x,\n      y,\n      is_drawing: true\n    }]);\n\n    // Send first point with is_first_point flag\n    const drawData = {\n      x,\n      y,\n      is_drawing: true,\n      is_first_point: true,\n      color: brushColor,\n      brush_size: brushSize\n    };\n    sendDrawData(drawData);\n\n    // Add user info to local drawing data\n    const localDrawData = {\n      ...drawData,\n      user_id: user === null || user === void 0 ? void 0 : user.id,\n      username: user === null || user === void 0 ? void 0 : user.username,\n      timestamp: Date.now()\n    };\n    addDrawingData(localDrawData);\n  }, [isGameActive, isCurrentDrawer, brushColor, brushSize, sendDrawData, addDrawingData, user]);\n  const draw = useCallback((x, y) => {\n    if (!isGameActive || !isCurrentDrawer || !isDrawing) return;\n\n    // Add to current stroke\n    setCurrentStroke(prev => [...prev, {\n      x,\n      y,\n      is_drawing: true\n    }]);\n\n    // Send drawing data to server\n    const drawData = {\n      x,\n      y,\n      is_drawing: true,\n      is_first_point: false,\n      color: brushColor,\n      brush_size: brushSize\n    };\n    sendDrawData(drawData);\n\n    // Add user info to local drawing data\n    const localDrawData = {\n      ...drawData,\n      user_id: user === null || user === void 0 ? void 0 : user.id,\n      username: user === null || user === void 0 ? void 0 : user.username,\n      timestamp: Date.now()\n    };\n    addDrawingData(localDrawData);\n    setLastX(x);\n    setLastY(y);\n  }, [isGameActive, isCurrentDrawer, isDrawing, brushColor, brushSize, sendDrawData, addDrawingData, user]);\n  const stopDrawing = useCallback(() => {\n    if (!isGameActive || !isCurrentDrawer) return;\n    setIsDrawing(false);\n\n    // Send stop drawing signal\n    const drawData = {\n      x: lastX,\n      y: lastY,\n      is_drawing: false,\n      color: brushColor,\n      brush_size: brushSize\n    };\n    sendDrawData(drawData);\n\n    // Add user info to local drawing data\n    const localDrawData = {\n      ...drawData,\n      user_id: user === null || user === void 0 ? void 0 : user.id,\n      username: user === null || user === void 0 ? void 0 : user.username,\n      timestamp: Date.now()\n    };\n    addDrawingData(localDrawData);\n    setCurrentStroke([]);\n  }, [isGameActive, isCurrentDrawer, lastX, lastY, brushColor, brushSize, sendDrawData, addDrawingData, user]);\n  const clearCanvas = useCallback(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, width, height);\n    setLastDrawingDataLength(0);\n\n    // Send clear canvas request to server\n    if (isGameActive && isCurrentDrawer) {\n      sendClearCanvas();\n    }\n  }, [width, height, isGameActive, isCurrentDrawer, sendClearCanvas]);\n\n  // Mouse events\n  const handleMouseDown = useCallback(e => {\n    e.preventDefault();\n    const pos = getMousePos(e);\n    startDrawing(pos.x, pos.y);\n  }, [getMousePos, startDrawing]);\n  const handleMouseMove = useCallback(e => {\n    e.preventDefault();\n    if (!isDrawing) return; // Only draw if mouse button is pressed\n    const pos = getMousePos(e);\n    draw(pos.x, pos.y);\n  }, [getMousePos, draw, isDrawing]);\n  const handleMouseUp = useCallback(e => {\n    e.preventDefault();\n    stopDrawing();\n  }, [stopDrawing]);\n  const handleMouseLeave = useCallback(e => {\n    e.preventDefault();\n    stopDrawing();\n  }, [stopDrawing]);\n\n  // Touch events\n  const handleTouchStart = useCallback(e => {\n    e.preventDefault();\n    const pos = getTouchPos(e);\n    startDrawing(pos.x, pos.y);\n  }, [getTouchPos, startDrawing]);\n  const handleTouchMove = useCallback(e => {\n    e.preventDefault();\n    if (!isDrawing) return; // Only draw if touch is active\n    const pos = getTouchPos(e);\n    draw(pos.x, pos.y);\n  }, [getTouchPos, draw, isDrawing]);\n  const handleTouchEnd = useCallback(e => {\n    e.preventDefault();\n    stopDrawing();\n  }, [stopDrawing]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"relative\",\n    children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n      ref: canvasRef,\n      className: `border-2 border-gray-300 rounded-lg bg-white ${isCurrentDrawer && isGameActive ? 'cursor-crosshair' : 'cursor-not-allowed'}`,\n      onMouseDown: handleMouseDown,\n      onMouseMove: handleMouseMove,\n      onMouseUp: handleMouseUp,\n      onMouseLeave: handleMouseLeave,\n      onTouchStart: handleTouchStart,\n      onTouchMove: handleTouchMove,\n      onTouchEnd: handleTouchEnd,\n      style: {\n        width: `${width}px`,\n        height: `${height}px`,\n        maxWidth: '100%',\n        maxHeight: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this), !isGameActive && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 rounded-lg\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-white text-lg font-medium\",\n        children: \"Game not started yet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 332,\n      columnNumber: 9\n    }, this), isCurrentDrawer && isGameActive && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"absolute top-4 left-4 bg-white bg-opacity-90 p-3 rounded-lg shadow-lg\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"text-sm font-medium\",\n            children: \"Color:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 346,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"color\",\n            value: brushColor,\n            onChange: e => useGameStore.getState().setBrushColor(e.target.value),\n            className: \"w-8 h-8 border rounded cursor-pointer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 347,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex items-center gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"text-sm font-medium\",\n            children: \"Size:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 355,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"1\",\n            max: \"20\",\n            value: brushSize,\n            onChange: e => useGameStore.getState().setBrushSize(parseInt(e.target.value)),\n            className: \"w-20\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"text-xs\",\n            children: brushSize\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 364,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: clearCanvas,\n          className: \"px-3 py-1 bg-red-500 text-white text-sm rounded hover:bg-red-600\",\n          children: \"Clear\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 310,\n    columnNumber: 5\n  }, this);\n};\n_s(DrawingCanvas, \"yJBMxemswzekg4YGceC/zTbiJR0=\", false, function () {\n  return [useAuthStore, useGameStore];\n});\n_c = DrawingCanvas;\nexport default DrawingCanvas;\nvar _c;\n$RefreshReg$(_c, \"DrawingCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","useState","useCallback","useGameStore","useAuthStore","jsxDEV","_jsxDEV","DrawingCanvas","width","height","_s","canvasRef","isDrawing","setIsDrawing","lastX","setLastX","lastY","setLastY","currentStroke","setCurrentStroke","lastDrawingDataLength","setLastDrawingDataLength","user","isDrawingMode","brushColor","brushSize","drawingData","addDrawingData","sendDrawData","currentDrawer","isGameActive","gameState","clearDrawing","sendClearCanvas","isCurrentDrawer","current_drawer_id","id","canvas","current","ctx","getContext","fillStyle","fillRect","lineCap","lineJoin","current_round","clearCanvas","length","handleDocumentMouseUp","stopDrawing","document","addEventListener","removeEventListener","strokesByUser","forEach","data","user_id","push","Object","values","userStrokes","sortedStrokes","sort","a","b","timestamp","strokeStyle","color","lineWidth","brush_size","beginPath","isFirstPoint","i","stroke","is_drawing","is_first_point","moveTo","x","y","lineTo","getMousePos","e","rect","getBoundingClientRect","scaleX","scaleY","clientX","left","clientY","top","getTouchPos","touch","touches","startDrawing","drawData","localDrawData","username","Date","now","draw","prev","handleMouseDown","preventDefault","pos","handleMouseMove","handleMouseUp","handleMouseLeave","handleTouchStart","handleTouchMove","handleTouchEnd","className","children","ref","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","onTouchStart","onTouchMove","onTouchEnd","style","maxWidth","maxHeight","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","getState","setBrushColor","target","min","max","setBrushSize","parseInt","onClick","_c","$RefreshReg$"],"sources":["/Users/walid/Documents/Networking/drawsync/frontend/src/components/DrawingCanvas.jsx"],"sourcesContent":["import React, { useRef, useEffect, useState, useCallback } from 'react';\nimport useGameStore from '../store/gameStore';\nimport useAuthStore from '../store/authStore';\n\nconst DrawingCanvas = ({ width = 800, height = 600 }) => {\n  const canvasRef = useRef(null);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [lastX, setLastX] = useState(0);\n  const [lastY, setLastY] = useState(0);\n  const [currentStroke, setCurrentStroke] = useState([]);\n  const [lastDrawingDataLength, setLastDrawingDataLength] = useState(0);\n\n  const { user } = useAuthStore();\n  const {\n    isDrawingMode,\n    brushColor,\n    brushSize,\n    drawingData,\n    addDrawingData,\n    sendDrawData,\n    currentDrawer,\n    isGameActive,\n    gameState,\n    clearDrawing,\n    sendClearCanvas,\n  } = useGameStore();\n\n  // Check if current user is the drawer\n  const isCurrentDrawer = gameState?.current_drawer_id === user?.id || false;\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    \n    // Set canvas size\n    canvas.width = width;\n    canvas.height = height;\n    \n    // Set default styles\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, width, height);\n    ctx.lineCap = 'round';\n    ctx.lineJoin = 'round';\n  }, [width, height]);\n\n  // Clear canvas when game starts new round or drawing data is cleared\n  useEffect(() => {\n    if (isGameActive && gameState?.current_round) {\n      clearCanvas();\n      clearDrawing();\n    }\n  }, [gameState?.current_round, isGameActive]);\n\n  // Clear canvas when drawing data is cleared\n  useEffect(() => {\n    if (drawingData.length === 0 && isGameActive) {\n      clearCanvas();\n    }\n  }, [drawingData.length, isGameActive]);\n\n  // Add document-level mouse up handler to stop drawing when mouse is released outside canvas\n  useEffect(() => {\n    const handleDocumentMouseUp = () => {\n      if (isDrawing) {\n        stopDrawing();\n      }\n    };\n\n    document.addEventListener('mouseup', handleDocumentMouseUp);\n    return () => {\n      document.removeEventListener('mouseup', handleDocumentMouseUp);\n    };\n  }, [isDrawing, stopDrawing]);\n\n  // Improved drawing data processing - redraw entire canvas for proper synchronization\n  useEffect(() => {\n    if (drawingData.length > 0) {\n      const canvas = canvasRef.current;\n      const ctx = canvas.getContext('2d');\n      \n      // Clear canvas first\n      ctx.fillStyle = 'white';\n      ctx.fillRect(0, 0, width, height);\n      \n      // Group drawing data by user to handle strokes properly\n      const strokesByUser = {};\n      \n      drawingData.forEach((data) => {\n        if (!strokesByUser[data.user_id]) {\n          strokesByUser[data.user_id] = [];\n        }\n        strokesByUser[data.user_id].push(data);\n      });\n      \n      // Draw each user's strokes\n      Object.values(strokesByUser).forEach((userStrokes) => {\n        if (userStrokes.length === 0) return;\n        \n        // Sort strokes by timestamp\n        const sortedStrokes = userStrokes.sort((a, b) => {\n          return (a.timestamp || 0) - (b.timestamp || 0);\n        });\n        \n        // Draw the stroke\n        ctx.strokeStyle = sortedStrokes[0].color || '#000000';\n        ctx.lineWidth = sortedStrokes[0].brush_size || 2;\n        ctx.lineCap = 'round';\n        ctx.lineJoin = 'round';\n        ctx.beginPath();\n        \n        let isFirstPoint = true;\n        \n        for (let i = 0; i < sortedStrokes.length; i++) {\n          const stroke = sortedStrokes[i];\n          \n          if (stroke.is_drawing) {\n            if (isFirstPoint || stroke.is_first_point) {\n              ctx.moveTo(stroke.x, stroke.y);\n              isFirstPoint = false;\n            } else {\n              ctx.lineTo(stroke.x, stroke.y);\n            }\n          } else {\n            // End the current stroke\n            ctx.stroke();\n            ctx.beginPath();\n            isFirstPoint = true;\n          }\n        }\n        \n        // Stroke the final path\n        if (!isFirstPoint) {\n          ctx.stroke();\n        }\n      });\n      \n      setLastDrawingDataLength(drawingData.length);\n    }\n  }, [drawingData, width, height]);\n\n  const getMousePos = useCallback((e) => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n    return {\n      x: (e.clientX - rect.left) * scaleX,\n      y: (e.clientY - rect.top) * scaleY,\n    };\n  }, []);\n\n  const getTouchPos = useCallback((e) => {\n    const canvas = canvasRef.current;\n    const rect = canvas.getBoundingClientRect();\n    const touch = e.touches[0];\n    const scaleX = canvas.width / rect.width;\n    const scaleY = canvas.height / rect.height;\n    return {\n      x: (touch.clientX - rect.left) * scaleX,\n      y: (touch.clientY - rect.top) * scaleY,\n    };\n  }, []);\n\n  const startDrawing = useCallback((x, y) => {\n    if (!isGameActive || !isCurrentDrawer) return;\n    \n    setIsDrawing(true);\n    setLastX(x);\n    setLastY(y);\n    setCurrentStroke([{ x, y, is_drawing: true }]);\n    \n    // Send first point with is_first_point flag\n    const drawData = {\n      x,\n      y,\n      is_drawing: true,\n      is_first_point: true,\n      color: brushColor,\n      brush_size: brushSize,\n    };\n\n    sendDrawData(drawData);\n    \n    // Add user info to local drawing data\n    const localDrawData = {\n      ...drawData,\n      user_id: user?.id,\n      username: user?.username,\n      timestamp: Date.now()\n    };\n    addDrawingData(localDrawData);\n  }, [isGameActive, isCurrentDrawer, brushColor, brushSize, sendDrawData, addDrawingData, user]);\n\n  const draw = useCallback((x, y) => {\n    if (!isGameActive || !isCurrentDrawer || !isDrawing) return;\n\n    // Add to current stroke\n    setCurrentStroke(prev => [...prev, { x, y, is_drawing: true }]);\n\n    // Send drawing data to server\n    const drawData = {\n      x,\n      y,\n      is_drawing: true,\n      is_first_point: false,\n      color: brushColor,\n      brush_size: brushSize,\n    };\n\n    sendDrawData(drawData);\n    \n    // Add user info to local drawing data\n    const localDrawData = {\n      ...drawData,\n      user_id: user?.id,\n      username: user?.username,\n      timestamp: Date.now()\n    };\n    addDrawingData(localDrawData);\n\n    setLastX(x);\n    setLastY(y);\n  }, [isGameActive, isCurrentDrawer, isDrawing, brushColor, brushSize, sendDrawData, addDrawingData, user]);\n\n  const stopDrawing = useCallback(() => {\n    if (!isGameActive || !isCurrentDrawer) return;\n    \n    setIsDrawing(false);\n    \n    // Send stop drawing signal\n    const drawData = {\n      x: lastX,\n      y: lastY,\n      is_drawing: false,\n      color: brushColor,\n      brush_size: brushSize,\n    };\n\n    sendDrawData(drawData);\n    \n    // Add user info to local drawing data\n    const localDrawData = {\n      ...drawData,\n      user_id: user?.id,\n      username: user?.username,\n      timestamp: Date.now()\n    };\n    addDrawingData(localDrawData);\n    \n    setCurrentStroke([]);\n  }, [isGameActive, isCurrentDrawer, lastX, lastY, brushColor, brushSize, sendDrawData, addDrawingData, user]);\n\n  const clearCanvas = useCallback(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.fillStyle = 'white';\n    ctx.fillRect(0, 0, width, height);\n    setLastDrawingDataLength(0);\n    \n    // Send clear canvas request to server\n    if (isGameActive && isCurrentDrawer) {\n      sendClearCanvas();\n    }\n  }, [width, height, isGameActive, isCurrentDrawer, sendClearCanvas]);\n\n  // Mouse events\n  const handleMouseDown = useCallback((e) => {\n    e.preventDefault();\n    const pos = getMousePos(e);\n    startDrawing(pos.x, pos.y);\n  }, [getMousePos, startDrawing]);\n\n  const handleMouseMove = useCallback((e) => {\n    e.preventDefault();\n    if (!isDrawing) return; // Only draw if mouse button is pressed\n    const pos = getMousePos(e);\n    draw(pos.x, pos.y);\n  }, [getMousePos, draw, isDrawing]);\n\n  const handleMouseUp = useCallback((e) => {\n    e.preventDefault();\n    stopDrawing();\n  }, [stopDrawing]);\n\n  const handleMouseLeave = useCallback((e) => {\n    e.preventDefault();\n    stopDrawing();\n  }, [stopDrawing]);\n\n  // Touch events\n  const handleTouchStart = useCallback((e) => {\n    e.preventDefault();\n    const pos = getTouchPos(e);\n    startDrawing(pos.x, pos.y);\n  }, [getTouchPos, startDrawing]);\n\n  const handleTouchMove = useCallback((e) => {\n    e.preventDefault();\n    if (!isDrawing) return; // Only draw if touch is active\n    const pos = getTouchPos(e);\n    draw(pos.x, pos.y);\n  }, [getTouchPos, draw, isDrawing]);\n\n  const handleTouchEnd = useCallback((e) => {\n    e.preventDefault();\n    stopDrawing();\n  }, [stopDrawing]);\n\n  return (\n    <div className=\"relative\">\n      <canvas\n        ref={canvasRef}\n        className={`border-2 border-gray-300 rounded-lg bg-white ${\n          isCurrentDrawer && isGameActive ? 'cursor-crosshair' : 'cursor-not-allowed'\n        }`}\n        onMouseDown={handleMouseDown}\n        onMouseMove={handleMouseMove}\n        onMouseUp={handleMouseUp}\n        onMouseLeave={handleMouseLeave}\n        onTouchStart={handleTouchStart}\n        onTouchMove={handleTouchMove}\n        onTouchEnd={handleTouchEnd}\n        style={{\n          width: `${width}px`,\n          height: `${height}px`,\n          maxWidth: '100%',\n          maxHeight: '100%',\n        }}\n      />\n      \n      {!isGameActive && (\n        <div className=\"absolute inset-0 flex items-center justify-center bg-black bg-opacity-50 rounded-lg\">\n          <p className=\"text-white text-lg font-medium\">\n            Game not started yet\n          </p>\n        </div>\n      )}\n      \n\n\n      {/* Drawing controls for current drawer */}\n      {isCurrentDrawer && isGameActive && (\n        <div className=\"absolute top-4 left-4 bg-white bg-opacity-90 p-3 rounded-lg shadow-lg\">\n          <div className=\"flex flex-col gap-2\">\n            <div className=\"flex items-center gap-2\">\n              <label className=\"text-sm font-medium\">Color:</label>\n              <input\n                type=\"color\"\n                value={brushColor}\n                onChange={(e) => useGameStore.getState().setBrushColor(e.target.value)}\n                className=\"w-8 h-8 border rounded cursor-pointer\"\n              />\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <label className=\"text-sm font-medium\">Size:</label>\n              <input\n                type=\"range\"\n                min=\"1\"\n                max=\"20\"\n                value={brushSize}\n                onChange={(e) => useGameStore.getState().setBrushSize(parseInt(e.target.value))}\n                className=\"w-20\"\n              />\n              <span className=\"text-xs\">{brushSize}</span>\n            </div>\n            <button\n              onClick={clearCanvas}\n              className=\"px-3 py-1 bg-red-500 text-white text-sm rounded hover:bg-red-600\"\n            >\n              Clear\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default DrawingCanvas; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}