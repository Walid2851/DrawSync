{"ast":null,"code":"import io from 'socket.io-client';\nclass SocketManager {\n  constructor() {\n    this.socket = null;\n    this.isConnected = false;\n    this.eventListeners = new Map();\n  }\n  connect(token) {\n    if (this.socket && this.isConnected) {\n      return;\n    }\n    this.socket = io('http://localhost:8001', {\n      auth: {\n        token: token\n      },\n      transports: ['websocket', 'polling']\n    });\n    this.socket.on('connect', () => {\n      console.log('Connected to socket server');\n      this.isConnected = true;\n    });\n    this.socket.on('disconnect', () => {\n      console.log('Disconnected from socket server');\n      this.isConnected = false;\n    });\n    this.socket.on('error', error => {\n      console.error('Socket error:', error);\n    });\n\n    // Set up event listeners\n    this.setupEventListeners();\n  }\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.isConnected = false;\n    }\n  }\n  setupEventListeners() {\n    // Authentication events\n    this.socket.on('authenticated', data => {\n      this.emit('authenticated', data);\n    });\n\n    // Room events\n    this.socket.on('room_joined', data => {\n      this.emit('room_joined', data);\n    });\n    this.socket.on('player_joined', data => {\n      this.emit('player_joined', data);\n    });\n    this.socket.on('player_left', data => {\n      this.emit('player_left', data);\n    });\n    this.socket.on('player_disconnected', data => {\n      this.emit('player_disconnected', data);\n    });\n\n    // Game events\n    this.socket.on('draw_data', data => {\n      this.emit('draw_data', data);\n    });\n    this.socket.on('chat_message', data => {\n      this.emit('chat_message', data);\n    });\n    this.socket.on('guess_result', data => {\n      this.emit('guess_result', data);\n    });\n    this.socket.on('word_guessed', data => {\n      this.emit('word_guessed', data);\n    });\n    this.socket.on('player_ready', data => {\n      this.emit('player_ready', data);\n    });\n    this.socket.on('game_started', data => {\n      this.emit('game_started', data);\n    });\n    this.socket.on('round_started', data => {\n      this.emit('round_started', data);\n    });\n    this.socket.on('round_ended', data => {\n      this.emit('round_ended', data);\n    });\n    this.socket.on('game_ended', data => {\n      this.emit('game_ended', data);\n    });\n  }\n\n  // Event listener management\n  on(event, callback) {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event).push(callback);\n  }\n  off(event, callback) {\n    if (this.eventListeners.has(event)) {\n      const listeners = this.eventListeners.get(event);\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n  emit(event, data) {\n    if (this.eventListeners.has(event)) {\n      this.eventListeners.get(event).forEach(callback => {\n        callback(data);\n      });\n    }\n  }\n\n  // Socket event emitters\n  joinRoom(roomId) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('join_room', {\n        room_id: roomId\n      });\n    }\n  }\n  leaveRoom() {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('leave_room');\n    }\n  }\n  sendDrawData(drawData) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('draw', drawData);\n    }\n  }\n  sendChatMessage(message) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('chat_message', message);\n    }\n  }\n  sendGuess(guess) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('guess_word', guess);\n    }\n  }\n  setReady(ready) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('ready', {\n        ready\n      });\n    }\n  }\n}\n\n// Create singleton instance\nconst socketManager = new SocketManager();\nexport default socketManager;","map":{"version":3,"names":["io","SocketManager","constructor","socket","isConnected","eventListeners","Map","connect","token","auth","transports","on","console","log","error","setupEventListeners","disconnect","data","emit","event","callback","has","set","get","push","off","listeners","index","indexOf","splice","forEach","joinRoom","roomId","room_id","leaveRoom","sendDrawData","drawData","sendChatMessage","message","sendGuess","guess","setReady","ready","socketManager"],"sources":["/Users/walid/Documents/Networking/drawsync/frontend/src/utils/socket.js"],"sourcesContent":["import io from 'socket.io-client';\n\nclass SocketManager {\n  constructor() {\n    this.socket = null;\n    this.isConnected = false;\n    this.eventListeners = new Map();\n  }\n\n  connect(token) {\n    if (this.socket && this.isConnected) {\n      return;\n    }\n\n    this.socket = io('http://localhost:8001', {\n      auth: {\n        token: token\n      },\n      transports: ['websocket', 'polling']\n    });\n\n    this.socket.on('connect', () => {\n      console.log('Connected to socket server');\n      this.isConnected = true;\n    });\n\n    this.socket.on('disconnect', () => {\n      console.log('Disconnected from socket server');\n      this.isConnected = false;\n    });\n\n    this.socket.on('error', (error) => {\n      console.error('Socket error:', error);\n    });\n\n    // Set up event listeners\n    this.setupEventListeners();\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      this.socket = null;\n      this.isConnected = false;\n    }\n  }\n\n  setupEventListeners() {\n    // Authentication events\n    this.socket.on('authenticated', (data) => {\n      this.emit('authenticated', data);\n    });\n\n    // Room events\n    this.socket.on('room_joined', (data) => {\n      this.emit('room_joined', data);\n    });\n\n    this.socket.on('player_joined', (data) => {\n      this.emit('player_joined', data);\n    });\n\n    this.socket.on('player_left', (data) => {\n      this.emit('player_left', data);\n    });\n\n    this.socket.on('player_disconnected', (data) => {\n      this.emit('player_disconnected', data);\n    });\n\n    // Game events\n    this.socket.on('draw_data', (data) => {\n      this.emit('draw_data', data);\n    });\n\n    this.socket.on('chat_message', (data) => {\n      this.emit('chat_message', data);\n    });\n\n    this.socket.on('guess_result', (data) => {\n      this.emit('guess_result', data);\n    });\n\n    this.socket.on('word_guessed', (data) => {\n      this.emit('word_guessed', data);\n    });\n\n    this.socket.on('player_ready', (data) => {\n      this.emit('player_ready', data);\n    });\n\n    this.socket.on('game_started', (data) => {\n      this.emit('game_started', data);\n    });\n\n    this.socket.on('round_started', (data) => {\n      this.emit('round_started', data);\n    });\n\n    this.socket.on('round_ended', (data) => {\n      this.emit('round_ended', data);\n    });\n\n    this.socket.on('game_ended', (data) => {\n      this.emit('game_ended', data);\n    });\n  }\n\n  // Event listener management\n  on(event, callback) {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event).push(callback);\n  }\n\n  off(event, callback) {\n    if (this.eventListeners.has(event)) {\n      const listeners = this.eventListeners.get(event);\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n\n  emit(event, data) {\n    if (this.eventListeners.has(event)) {\n      this.eventListeners.get(event).forEach(callback => {\n        callback(data);\n      });\n    }\n  }\n\n  // Socket event emitters\n  joinRoom(roomId) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('join_room', { room_id: roomId });\n    }\n  }\n\n  leaveRoom() {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('leave_room');\n    }\n  }\n\n  sendDrawData(drawData) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('draw', drawData);\n    }\n  }\n\n  sendChatMessage(message) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('chat_message', message);\n    }\n  }\n\n  sendGuess(guess) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('guess_word', guess);\n    }\n  }\n\n  setReady(ready) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('ready', { ready });\n    }\n  }\n}\n\n// Create singleton instance\nconst socketManager = new SocketManager();\nexport default socketManager; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}