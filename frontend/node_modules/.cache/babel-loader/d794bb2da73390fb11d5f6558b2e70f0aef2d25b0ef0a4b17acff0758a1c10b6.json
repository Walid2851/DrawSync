{"ast":null,"code":"import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { authAPI } from '../utils/api';\nconst useAuthStore = create(persist((set, get) => ({\n  user: null,\n  token: null,\n  isAuthenticated: false,\n  isLoading: false,\n  error: null,\n  // Login user\n  login: async credentials => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await authAPI.login(credentials);\n      const {\n        access_token\n      } = response.data;\n\n      // Get user info using the token\n      const userResponse = await authAPI.getCurrentUser();\n      const user = userResponse.data;\n      set({\n        user,\n        token: access_token,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null\n      });\n\n      // Store token in localStorage\n      localStorage.setItem('token', access_token);\n      localStorage.setItem('user', JSON.stringify(user));\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || 'Login failed';\n      set({\n        isLoading: false,\n        error: errorMessage\n      });\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  },\n  // Register user\n  register: async userData => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    try {\n      const response = await authAPI.register(userData);\n      const user = response.data;\n\n      // For registration, we need to login to get the token\n      const loginResponse = await authAPI.login({\n        username: userData.username,\n        password: userData.password\n      });\n      const {\n        access_token\n      } = loginResponse.data;\n      set({\n        user,\n        token: access_token,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null\n      });\n\n      // Store token in localStorage\n      localStorage.setItem('token', access_token);\n      localStorage.setItem('user', JSON.stringify(user));\n      return {\n        success: true\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || 'Registration failed';\n      set({\n        isLoading: false,\n        error: errorMessage\n      });\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  },\n  // Logout user\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    set({\n      user: null,\n      token: null,\n      isAuthenticated: false,\n      isLoading: false,\n      error: null\n    });\n  },\n  // Initialize auth state from localStorage\n  initializeAuth: async () => {\n    const token = localStorage.getItem('token');\n    const user = localStorage.getItem('user');\n    if (token && user) {\n      try {\n        const userData = JSON.parse(user);\n        set({\n          user: userData,\n          token,\n          isAuthenticated: true\n        });\n\n        // Verify token is still valid\n        await authAPI.getCurrentUser();\n      } catch (error) {\n        // Token is invalid, clear auth state\n        get().logout();\n      }\n    }\n  },\n  // Clear error\n  clearError: () => {\n    set({\n      error: null\n    });\n  },\n  // Update user data\n  updateUser: userData => {\n    set({\n      user: userData\n    });\n    localStorage.setItem('user', JSON.stringify(userData));\n  }\n}), {\n  name: 'auth-storage',\n  partialize: state => ({\n    user: state.user,\n    token: state.token,\n    isAuthenticated: state.isAuthenticated\n  })\n}));\nexport default useAuthStore;","map":{"version":3,"names":["create","persist","authAPI","useAuthStore","set","get","user","token","isAuthenticated","isLoading","error","login","credentials","response","access_token","data","userResponse","getCurrentUser","localStorage","setItem","JSON","stringify","success","_error$response","_error$response$data","errorMessage","detail","register","userData","loginResponse","username","password","_error$response2","_error$response2$data","logout","removeItem","initializeAuth","getItem","parse","clearError","updateUser","name","partialize","state"],"sources":["/Users/walid/Documents/Networking/drawsync/frontend/src/store/authStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { authAPI } from '../utils/api';\n\nconst useAuthStore = create(\n  persist(\n    (set, get) => ({\n      user: null,\n      token: null,\n      isAuthenticated: false,\n      isLoading: false,\n      error: null,\n\n      // Login user\n      login: async (credentials) => {\n        set({ isLoading: true, error: null });\n        try {\n          const response = await authAPI.login(credentials);\n          const { access_token } = response.data;\n          \n          // Get user info using the token\n          const userResponse = await authAPI.getCurrentUser();\n          const user = userResponse.data;\n          \n          set({\n            user,\n            token: access_token,\n            isAuthenticated: true,\n            isLoading: false,\n            error: null,\n          });\n\n          // Store token in localStorage\n          localStorage.setItem('token', access_token);\n          localStorage.setItem('user', JSON.stringify(user));\n          \n          return { success: true };\n        } catch (error) {\n          const errorMessage = error.response?.data?.detail || 'Login failed';\n          set({\n            isLoading: false,\n            error: errorMessage,\n          });\n          return { success: false, error: errorMessage };\n        }\n      },\n\n      // Register user\n      register: async (userData) => {\n        set({ isLoading: true, error: null });\n        try {\n          const response = await authAPI.register(userData);\n          const user = response.data;\n          \n          // For registration, we need to login to get the token\n          const loginResponse = await authAPI.login({\n            username: userData.username,\n            password: userData.password\n          });\n          const { access_token } = loginResponse.data;\n          \n          set({\n            user,\n            token: access_token,\n            isAuthenticated: true,\n            isLoading: false,\n            error: null,\n          });\n\n          // Store token in localStorage\n          localStorage.setItem('token', access_token);\n          localStorage.setItem('user', JSON.stringify(user));\n          \n          return { success: true };\n        } catch (error) {\n          const errorMessage = error.response?.data?.detail || 'Registration failed';\n          set({\n            isLoading: false,\n            error: errorMessage,\n          });\n          return { success: false, error: errorMessage };\n        }\n      },\n\n      // Logout user\n      logout: () => {\n        localStorage.removeItem('token');\n        localStorage.removeItem('user');\n        set({\n          user: null,\n          token: null,\n          isAuthenticated: false,\n          isLoading: false,\n          error: null,\n        });\n      },\n\n      // Initialize auth state from localStorage\n      initializeAuth: async () => {\n        const token = localStorage.getItem('token');\n        const user = localStorage.getItem('user');\n\n        if (token && user) {\n          try {\n            const userData = JSON.parse(user);\n            set({\n              user: userData,\n              token,\n              isAuthenticated: true,\n            });\n\n            // Verify token is still valid\n            await authAPI.getCurrentUser();\n          } catch (error) {\n            // Token is invalid, clear auth state\n            get().logout();\n          }\n        }\n      },\n\n      // Clear error\n      clearError: () => {\n        set({ error: null });\n      },\n\n      // Update user data\n      updateUser: (userData) => {\n        set({ user: userData });\n        localStorage.setItem('user', JSON.stringify(userData));\n      },\n    }),\n    {\n      name: 'auth-storage',\n      partialize: (state) => ({\n        user: state.user,\n        token: state.token,\n        isAuthenticated: state.isAuthenticated,\n      }),\n    }\n  )\n);\n\nexport default useAuthStore; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}