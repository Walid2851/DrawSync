{"ast":null,"code":"import { create } from 'zustand';\nimport socketManager from '../utils/socket';\nconst useGameStore = create((set, get) => ({\n  // Room state\n  currentRoom: null,\n  players: [],\n  isInRoom: false,\n  // Game state\n  gameState: null,\n  isGameActive: false,\n  currentRound: 0,\n  totalRounds: 5,\n  timeRemaining: 0,\n  currentWord: '',\n  isDrawing: false,\n  currentDrawer: null,\n  // Drawing state\n  drawingData: [],\n  brushColor: '#000000',\n  brushSize: 2,\n  isDrawingMode: false,\n  // Chat state\n  chatMessages: [],\n  guessInput: '',\n  // UI state\n  isLoading: false,\n  error: null,\n  // Actions\n  joinRoom: roomId => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    socketManager.joinRoom(roomId);\n    set({\n      isInRoom: true,\n      isLoading: false\n    });\n  },\n  leaveRoom: () => {\n    socketManager.leaveRoom();\n    set({\n      currentRoom: null,\n      players: [],\n      isInRoom: false,\n      gameState: null,\n      isGameActive: false,\n      chatMessages: [],\n      drawingData: []\n    });\n  },\n  setRoomData: roomData => {\n    set({\n      currentRoom: roomData\n    });\n  },\n  setPlayers: players => {\n    set({\n      players\n    });\n  },\n  addPlayer: player => {\n    set(state => ({\n      players: [...state.players, player]\n    }));\n  },\n  removePlayer: playerId => {\n    set(state => ({\n      players: state.players.filter(p => p.id !== playerId)\n    }));\n  },\n  setGameState: gameState => {\n    set({\n      gameState,\n      isGameActive: true\n    });\n  },\n  setRoundInfo: roundInfo => {\n    set({\n      currentRound: roundInfo.round,\n      totalRounds: roundInfo.totalRounds,\n      timeRemaining: roundInfo.timeRemaining,\n      currentWord: roundInfo.word || '',\n      currentDrawer: roundInfo.drawer,\n      isDrawing: roundInfo.isDrawing || false\n    });\n  },\n  updateTimeRemaining: time => {\n    set({\n      timeRemaining: time\n    });\n  },\n  addDrawingData: data => {\n    set(state => ({\n      drawingData: [...state.drawingData, data]\n    }));\n  },\n  clearDrawing: () => {\n    set({\n      drawingData: []\n    });\n  },\n  setBrushColor: color => {\n    set({\n      brushColor: color\n    });\n  },\n  setBrushSize: size => {\n    set({\n      brushSize: size\n    });\n  },\n  setDrawingMode: mode => {\n    set({\n      isDrawingMode: mode\n    });\n  },\n  addChatMessage: message => {\n    set(state => ({\n      chatMessages: [...state.chatMessages, message]\n    }));\n  },\n  addChatMessageFromSocket: messageData => {\n    set(state => ({\n      chatMessages: [...state.chatMessages, messageData]\n    }));\n  },\n  setGuessInput: input => {\n    set({\n      guessInput: input\n    });\n  },\n  sendGuess: () => {\n    const {\n      guessInput\n    } = get();\n    if (guessInput.trim()) {\n      socketManager.sendGuess({\n        guess: guessInput.trim()\n      });\n      set({\n        guessInput: ''\n      });\n    }\n  },\n  sendChatMessage: message => {\n    socketManager.sendChatMessage({\n      message\n    });\n  },\n  sendDrawData: drawData => {\n    socketManager.sendDrawData(drawData);\n  },\n  setReady: ready => {\n    socketManager.setReady(ready);\n  },\n  setError: error => {\n    set({\n      error\n    });\n  },\n  clearError: () => {\n    set({\n      error: null\n    });\n  },\n  resetGame: () => {\n    set({\n      gameState: null,\n      isGameActive: false,\n      currentRound: 0,\n      timeRemaining: 0,\n      currentWord: '',\n      isDrawing: false,\n      currentDrawer: null,\n      drawingData: [],\n      chatMessages: [],\n      guessInput: ''\n    });\n  }\n}));\nexport default useGameStore;","map":{"version":3,"names":["create","socketManager","useGameStore","set","get","currentRoom","players","isInRoom","gameState","isGameActive","currentRound","totalRounds","timeRemaining","currentWord","isDrawing","currentDrawer","drawingData","brushColor","brushSize","isDrawingMode","chatMessages","guessInput","isLoading","error","joinRoom","roomId","leaveRoom","setRoomData","roomData","setPlayers","addPlayer","player","state","removePlayer","playerId","filter","p","id","setGameState","setRoundInfo","roundInfo","round","word","drawer","updateTimeRemaining","time","addDrawingData","data","clearDrawing","setBrushColor","color","setBrushSize","size","setDrawingMode","mode","addChatMessage","message","addChatMessageFromSocket","messageData","setGuessInput","input","sendGuess","trim","guess","sendChatMessage","sendDrawData","drawData","setReady","ready","setError","clearError","resetGame"],"sources":["/Users/walid/Documents/Networking/drawsync/frontend/src/store/gameStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport socketManager from '../utils/socket';\n\nconst useGameStore = create((set, get) => ({\n  // Room state\n  currentRoom: null,\n  players: [],\n  isInRoom: false,\n\n  // Game state\n  gameState: null,\n  isGameActive: false,\n  currentRound: 0,\n  totalRounds: 5,\n  timeRemaining: 0,\n  currentWord: '',\n  isDrawing: false,\n  currentDrawer: null,\n\n  // Drawing state\n  drawingData: [],\n  brushColor: '#000000',\n  brushSize: 2,\n  isDrawingMode: false,\n\n  // Chat state\n  chatMessages: [],\n  guessInput: '',\n\n  // UI state\n  isLoading: false,\n  error: null,\n\n  // Actions\n  joinRoom: (roomId) => {\n    set({ isLoading: true, error: null });\n    socketManager.joinRoom(roomId);\n    set({ isInRoom: true, isLoading: false });\n  },\n\n  leaveRoom: () => {\n    socketManager.leaveRoom();\n    set({\n      currentRoom: null,\n      players: [],\n      isInRoom: false,\n      gameState: null,\n      isGameActive: false,\n      chatMessages: [],\n      drawingData: [],\n    });\n  },\n\n  setRoomData: (roomData) => {\n    set({ currentRoom: roomData });\n  },\n\n  setPlayers: (players) => {\n    set({ players });\n  },\n\n  addPlayer: (player) => {\n    set((state) => ({\n      players: [...state.players, player],\n    }));\n  },\n\n  removePlayer: (playerId) => {\n    set((state) => ({\n      players: state.players.filter((p) => p.id !== playerId),\n    }));\n  },\n\n  setGameState: (gameState) => {\n    set({ gameState, isGameActive: true });\n  },\n\n  setRoundInfo: (roundInfo) => {\n    set({\n      currentRound: roundInfo.round,\n      totalRounds: roundInfo.totalRounds,\n      timeRemaining: roundInfo.timeRemaining,\n      currentWord: roundInfo.word || '',\n      currentDrawer: roundInfo.drawer,\n      isDrawing: roundInfo.isDrawing || false,\n    });\n  },\n\n  updateTimeRemaining: (time) => {\n    set({ timeRemaining: time });\n  },\n\n  addDrawingData: (data) => {\n    set((state) => ({\n      drawingData: [...state.drawingData, data],\n    }));\n  },\n\n  clearDrawing: () => {\n    set({ drawingData: [] });\n  },\n\n  setBrushColor: (color) => {\n    set({ brushColor: color });\n  },\n\n  setBrushSize: (size) => {\n    set({ brushSize: size });\n  },\n\n  setDrawingMode: (mode) => {\n    set({ isDrawingMode: mode });\n  },\n\n  addChatMessage: (message) => {\n    set((state) => ({\n      chatMessages: [...state.chatMessages, message],\n    }));\n  },\n\n  addChatMessageFromSocket: (messageData) => {\n    set((state) => ({\n      chatMessages: [...state.chatMessages, messageData],\n    }));\n  },\n\n  setGuessInput: (input) => {\n    set({ guessInput: input });\n  },\n\n  sendGuess: () => {\n    const { guessInput } = get();\n    if (guessInput.trim()) {\n      socketManager.sendGuess({ guess: guessInput.trim() });\n      set({ guessInput: '' });\n    }\n  },\n\n  sendChatMessage: (message) => {\n    socketManager.sendChatMessage({ message });\n  },\n\n  sendDrawData: (drawData) => {\n    socketManager.sendDrawData(drawData);\n  },\n\n  setReady: (ready) => {\n    socketManager.setReady(ready);\n  },\n\n  setError: (error) => {\n    set({ error });\n  },\n\n  clearError: () => {\n    set({ error: null });\n  },\n\n  resetGame: () => {\n    set({\n      gameState: null,\n      isGameActive: false,\n      currentRound: 0,\n      timeRemaining: 0,\n      currentWord: '',\n      isDrawing: false,\n      currentDrawer: null,\n      drawingData: [],\n      chatMessages: [],\n      guessInput: '',\n    });\n  },\n}));\n\nexport default useGameStore; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}