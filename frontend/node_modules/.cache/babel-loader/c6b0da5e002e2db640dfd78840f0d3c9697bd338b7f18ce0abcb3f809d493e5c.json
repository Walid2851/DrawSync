{"ast":null,"code":"import { create } from 'zustand';\nimport socketManager from '../utils/socket';\nconst useGameStore = create((set, get) => ({\n  // Room state\n  currentRoom: null,\n  players: [],\n  isInRoom: false,\n  // Game state\n  gameState: null,\n  isGameActive: false,\n  currentRound: 0,\n  totalRounds: 5,\n  timeRemaining: 0,\n  currentWord: '',\n  isDrawing: false,\n  currentDrawer: null,\n  guessedPlayers: [],\n  guessProgress: {\n    guessed: 0,\n    total: 0\n  },\n  // Drawing state\n  drawingData: [],\n  brushColor: '#000000',\n  brushSize: 2,\n  isDrawingMode: false,\n  // Chat state\n  chatMessages: [],\n  guessInput: '',\n  // Socket state\n  isSocketConnected: false,\n  // UI state\n  isLoading: false,\n  error: null,\n  // Actions\n  setSocketConnected: connected => {\n    set({\n      isSocketConnected: connected\n    });\n  },\n  joinRoom: roomId => {\n    set({\n      isLoading: true,\n      error: null\n    });\n    socketManager.joinRoom(roomId);\n    set({\n      isInRoom: true,\n      isLoading: false\n    });\n  },\n  leaveRoom: () => {\n    socketManager.leaveRoom();\n    set({\n      currentRoom: null,\n      players: [],\n      isInRoom: false,\n      gameState: null,\n      isGameActive: false,\n      chatMessages: [],\n      drawingData: []\n    });\n  },\n  deleteRoom: () => {\n    socketManager.deleteRoom();\n    set({\n      currentRoom: null,\n      players: [],\n      isInRoom: false,\n      gameState: null,\n      isGameActive: false,\n      chatMessages: [],\n      drawingData: []\n    });\n  },\n  setRoomData: roomData => {\n    set({\n      currentRoom: roomData\n    });\n  },\n  setPlayers: players => {\n    // Ensure players array is unique by ID\n    const uniquePlayers = players.filter((player, index, self) => index === self.findIndex(p => p.id === player.id));\n    set({\n      players: uniquePlayers\n    });\n  },\n  addPlayer: player => {\n    set(state => {\n      // Check if player already exists\n      const existingPlayer = state.players.find(p => p.id === player.id);\n      if (existingPlayer) {\n        return state; // Player already exists, don't add duplicate\n      }\n      return {\n        players: [...state.players, player]\n      };\n    });\n  },\n  removePlayer: playerId => {\n    set(state => ({\n      players: state.players.filter(p => p.id !== playerId)\n    }));\n  },\n  setGameState: gameState => {\n    set(state => ({\n      gameState: {\n        ...state.gameState,\n        ...gameState\n      },\n      isGameActive: gameState.game_started !== undefined ? gameState.game_started : state.isGameActive,\n      currentRound: gameState.current_round || state.currentRound,\n      totalRounds: gameState.max_rounds || state.totalRounds,\n      currentWord: gameState.word || state.currentWord,\n      timeRemaining: gameState.time_remaining || state.timeRemaining,\n      currentDrawer: gameState.current_drawer_id || state.currentDrawer,\n      isDrawing: gameState.is_drawer || false\n    }));\n  },\n  setRoundInfo: roundInfo => {\n    set({\n      currentRound: roundInfo.round,\n      totalRounds: roundInfo.totalRounds,\n      timeRemaining: roundInfo.timeRemaining,\n      currentWord: roundInfo.word || '',\n      currentDrawer: roundInfo.drawer,\n      isDrawing: roundInfo.isDrawing || false\n    });\n  },\n  updateTimeRemaining: time => {\n    set({\n      timeRemaining: time\n    });\n  },\n  addDrawingData: data => {\n    set(state => ({\n      drawingData: [...state.drawingData, data]\n    }));\n  },\n  clearDrawing: () => {\n    set({\n      drawingData: []\n    });\n  },\n  sendClearCanvas: () => {\n    const {\n      isSocketConnected\n    } = get();\n    if (isSocketConnected) {\n      socketManager.sendClearCanvas();\n    } else {\n      console.error('Cannot clear canvas: Socket not connected');\n    }\n  },\n  setBrushColor: color => {\n    set({\n      brushColor: color\n    });\n  },\n  setBrushSize: size => {\n    set({\n      brushSize: size\n    });\n  },\n  setDrawingMode: mode => {\n    set({\n      isDrawingMode: mode\n    });\n  },\n  addChatMessage: message => {\n    set(state => ({\n      chatMessages: [...state.chatMessages, message]\n    }));\n  },\n  addChatMessageFromSocket: messageData => {\n    // Format the message data to match the expected structure\n    const formattedMessage = {\n      username: messageData.username || 'Unknown',\n      message: messageData.message || '',\n      timestamp: (messageData.timestamp || Date.now() / 1000) * 1000,\n      // Convert to milliseconds for JavaScript Date\n      isCorrectGuess: false,\n      isSystemMessage: false\n    };\n    set(state => ({\n      chatMessages: [...state.chatMessages, formattedMessage]\n    }));\n  },\n  addCorrectGuessMessage: messageData => {\n    // Format correct guess message\n    const formattedMessage = {\n      username: messageData.username || 'Unknown',\n      message: messageData.message || 'Guessed correctly!',\n      timestamp: Date.now(),\n      isCorrectGuess: true,\n      isSystemMessage: true\n    };\n    set(state => ({\n      chatMessages: [...state.chatMessages, formattedMessage]\n    }));\n  },\n  setGuessInput: input => {\n    set({\n      guessInput: input\n    });\n  },\n  sendGuess: () => {\n    const {\n      guessInput,\n      isSocketConnected\n    } = get();\n    if (guessInput.trim() && isSocketConnected) {\n      socketManager.sendGuess(guessInput.trim());\n      set({\n        guessInput: ''\n      });\n    } else if (!isSocketConnected) {\n      console.error('Cannot send guess: Socket not connected');\n    }\n  },\n  sendChatMessage: message => {\n    const {\n      isSocketConnected\n    } = get();\n    if (isSocketConnected) {\n      socketManager.sendChatMessage(message);\n    } else {\n      console.error('Cannot send chat message: Socket not connected');\n    }\n  },\n  sendDrawData: drawData => {\n    const {\n      isSocketConnected\n    } = get();\n    if (isSocketConnected) {\n      // Add timestamp to drawing data\n      const dataWithTimestamp = {\n        ...drawData,\n        timestamp: Date.now()\n      };\n      socketManager.sendDrawData(dataWithTimestamp.x, dataWithTimestamp.y, dataWithTimestamp.is_drawing, dataWithTimestamp.color, dataWithTimestamp.brush_size, dataWithTimestamp.is_first_point || false);\n    } else {\n      console.error('Cannot send draw data: Socket not connected');\n    }\n  },\n  startGame: () => {\n    const {\n      isSocketConnected\n    } = get();\n    if (isSocketConnected) {\n      socketManager.startGame();\n    } else {\n      console.error('Cannot start game: Socket not connected');\n    }\n  },\n  setReady: ready => {\n    const {\n      isSocketConnected\n    } = get();\n    if (isSocketConnected) {\n      socketManager.setReady(ready);\n    } else {\n      console.error('Cannot set ready status: Socket not connected');\n    }\n  },\n  skipTurn: () => {\n    const {\n      isSocketConnected\n    } = get();\n    if (isSocketConnected) {\n      socketManager.skipTurn();\n    } else {\n      console.error('Cannot skip turn: Socket not connected');\n    }\n  },\n  resetGameState: () => {\n    set({\n      gameState: null,\n      isGameActive: false,\n      currentRound: 0,\n      timeRemaining: 0,\n      currentWord: '',\n      isDrawing: false,\n      currentDrawer: null,\n      drawingData: [],\n      chatMessages: []\n    });\n  },\n  // Socket event handlers\n  handleSocketConnected: data => {\n    set({\n      isSocketConnected: data.connected\n    });\n  },\n  handleAuthenticated: data => {\n    console.log('Authenticated:', data);\n  },\n  handleRoomJoined: data => {\n    set({\n      currentRoom: {\n        id: data.room_id\n      },\n      players: data.players || [],\n      isInRoom: true\n    });\n  },\n  handlePlayerJoined: data => {\n    set(state => {\n      // Check if player already exists\n      const existingPlayer = state.players.find(p => p.id === data.user_id);\n      if (existingPlayer) {\n        return state; // Player already exists, don't add duplicate\n      }\n      return {\n        players: [...state.players, {\n          id: data.user_id,\n          username: data.username,\n          score: 0,\n          ready: false\n        }]\n      };\n    });\n  },\n  handlePlayerLeft: data => {\n    set(state => ({\n      players: state.players.filter(p => p.id !== data.user_id)\n    }));\n  },\n  handleGameStarted: data => {\n    set({\n      isGameActive: true\n    });\n  },\n  handleRoundStarted: data => {\n    set({\n      currentRound: data.round,\n      timeRemaining: data.time_remaining,\n      drawingData: [] // Clear drawing data for new round\n    });\n    console.log('Round started:', data);\n  },\n  handleWordAssigned: data => {\n    set({\n      currentWord: data.word\n    });\n  },\n  handleCorrectGuess: data => {\n    // Add correct guess message to chat\n    get().addCorrectGuessMessage(data);\n\n    // Update guess progress\n    set(state => {\n      const newGuessedPlayers = [...state.guessedPlayers, data.user_id];\n      const nonDrawerPlayers = state.players.filter(p => p.id !== state.currentDrawer);\n      const totalNonDrawers = nonDrawerPlayers.length;\n      const guessedCount = newGuessedPlayers.length;\n      return {\n        guessedPlayers: newGuessedPlayers,\n        guessProgress: {\n          guessed: guessedCount,\n          total: totalNonDrawers\n        }\n      };\n    });\n  },\n  handleRoundEnded: data => {\n    set({\n      currentWord: '',\n      drawingData: []\n    });\n    console.log('Round ended:', data);\n  },\n  handleGameEnded: data => {\n    set({\n      isGameActive: false,\n      currentRound: 0,\n      timeRemaining: 0,\n      currentWord: '',\n      drawingData: []\n    });\n  },\n  handleTimeUpdate: data => {\n    set({\n      timeRemaining: data.time_remaining\n    });\n    console.log('Time update:', data.time_remaining);\n  },\n  handleCanvasCleared: data => {\n    set({\n      drawingData: []\n    });\n  },\n  handleRoomDeleted: data => {\n    set({\n      currentRoom: null,\n      players: [],\n      isInRoom: false,\n      gameState: null,\n      isGameActive: false,\n      chatMessages: [],\n      drawingData: []\n    });\n  },\n  handlePlayersUpdate: data => {\n    set({\n      players: data.players || []\n    });\n  },\n  // Handle incoming drawing data from other players\n  handleDrawData: data => {\n    if (data && data.data) {\n      // Add the received drawing data to the store\n      set(state => ({\n        drawingData: [...state.drawingData, data.data]\n      }));\n    }\n  },\n  // Handle incoming game state updates\n  handleGameState: data => {\n    set(state => ({\n      gameState: {\n        ...state.gameState,\n        ...data\n      },\n      isGameActive: data.game_started !== undefined ? data.game_started : state.isGameActive,\n      currentRound: data.current_round || state.currentRound,\n      totalRounds: data.max_rounds || state.totalRounds,\n      currentWord: data.word || state.currentWord,\n      timeRemaining: data.time_remaining || state.timeRemaining,\n      currentDrawer: data.current_drawer_id || state.currentDrawer,\n      isDrawing: data.is_drawer || false\n    }));\n    console.log('Game state update:', data);\n  }\n}));\nexport default useGameStore;","map":{"version":3,"names":["create","socketManager","useGameStore","set","get","currentRoom","players","isInRoom","gameState","isGameActive","currentRound","totalRounds","timeRemaining","currentWord","isDrawing","currentDrawer","guessedPlayers","guessProgress","guessed","total","drawingData","brushColor","brushSize","isDrawingMode","chatMessages","guessInput","isSocketConnected","isLoading","error","setSocketConnected","connected","joinRoom","roomId","leaveRoom","deleteRoom","setRoomData","roomData","setPlayers","uniquePlayers","filter","player","index","self","findIndex","p","id","addPlayer","state","existingPlayer","find","removePlayer","playerId","setGameState","game_started","undefined","current_round","max_rounds","word","time_remaining","current_drawer_id","is_drawer","setRoundInfo","roundInfo","round","drawer","updateTimeRemaining","time","addDrawingData","data","clearDrawing","sendClearCanvas","console","setBrushColor","color","setBrushSize","size","setDrawingMode","mode","addChatMessage","message","addChatMessageFromSocket","messageData","formattedMessage","username","timestamp","Date","now","isCorrectGuess","isSystemMessage","addCorrectGuessMessage","setGuessInput","input","sendGuess","trim","sendChatMessage","sendDrawData","drawData","dataWithTimestamp","x","y","is_drawing","brush_size","is_first_point","startGame","setReady","ready","skipTurn","resetGameState","handleSocketConnected","handleAuthenticated","log","handleRoomJoined","room_id","handlePlayerJoined","user_id","score","handlePlayerLeft","handleGameStarted","handleRoundStarted","handleWordAssigned","handleCorrectGuess","newGuessedPlayers","nonDrawerPlayers","totalNonDrawers","length","guessedCount","handleRoundEnded","handleGameEnded","handleTimeUpdate","handleCanvasCleared","handleRoomDeleted","handlePlayersUpdate","handleDrawData","handleGameState"],"sources":["/Users/walid/Documents/Networking/drawsync/frontend/src/store/gameStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport socketManager from '../utils/socket';\n\nconst useGameStore = create((set, get) => ({\n  // Room state\n  currentRoom: null,\n  players: [],\n  isInRoom: false,\n\n  // Game state\n  gameState: null,\n  isGameActive: false,\n  currentRound: 0,\n  totalRounds: 5,\n  timeRemaining: 0,\n  currentWord: '',\n  isDrawing: false,\n  currentDrawer: null,\n  guessedPlayers: [],\n  guessProgress: { guessed: 0, total: 0 },\n\n  // Drawing state\n  drawingData: [],\n  brushColor: '#000000',\n  brushSize: 2,\n  isDrawingMode: false,\n\n  // Chat state\n  chatMessages: [],\n  guessInput: '',\n\n  // Socket state\n  isSocketConnected: false,\n\n  // UI state\n  isLoading: false,\n  error: null,\n\n  // Actions\n  setSocketConnected: (connected) => {\n    set({ isSocketConnected: connected });\n  },\n\n  joinRoom: (roomId) => {\n    set({ isLoading: true, error: null });\n    socketManager.joinRoom(roomId);\n    set({ isInRoom: true, isLoading: false });\n  },\n\n  leaveRoom: () => {\n    socketManager.leaveRoom();\n    set({\n      currentRoom: null,\n      players: [],\n      isInRoom: false,\n      gameState: null,\n      isGameActive: false,\n      chatMessages: [],\n      drawingData: [],\n    });\n  },\n\n  deleteRoom: () => {\n    socketManager.deleteRoom();\n    set({\n      currentRoom: null,\n      players: [],\n      isInRoom: false,\n      gameState: null,\n      isGameActive: false,\n      chatMessages: [],\n      drawingData: [],\n    });\n  },\n\n  setRoomData: (roomData) => {\n    set({ currentRoom: roomData });\n  },\n\n  setPlayers: (players) => {\n    // Ensure players array is unique by ID\n    const uniquePlayers = players.filter((player, index, self) => \n      index === self.findIndex(p => p.id === player.id)\n    );\n    set({ players: uniquePlayers });\n  },\n\n  addPlayer: (player) => {\n    set((state) => {\n      // Check if player already exists\n      const existingPlayer = state.players.find(p => p.id === player.id);\n      if (existingPlayer) {\n        return state; // Player already exists, don't add duplicate\n      }\n      \n      return {\n        players: [...state.players, player],\n      };\n    });\n  },\n\n  removePlayer: (playerId) => {\n    set((state) => ({\n      players: state.players.filter((p) => p.id !== playerId),\n    }));\n  },\n\n  setGameState: (gameState) => {\n    set((state) => ({\n      gameState: { ...state.gameState, ...gameState },\n      isGameActive: gameState.game_started !== undefined ? gameState.game_started : state.isGameActive,\n      currentRound: gameState.current_round || state.currentRound,\n      totalRounds: gameState.max_rounds || state.totalRounds,\n      currentWord: gameState.word || state.currentWord,\n      timeRemaining: gameState.time_remaining || state.timeRemaining,\n      currentDrawer: gameState.current_drawer_id || state.currentDrawer,\n      isDrawing: gameState.is_drawer || false,\n    }));\n  },\n\n  setRoundInfo: (roundInfo) => {\n    set({\n      currentRound: roundInfo.round,\n      totalRounds: roundInfo.totalRounds,\n      timeRemaining: roundInfo.timeRemaining,\n      currentWord: roundInfo.word || '',\n      currentDrawer: roundInfo.drawer,\n      isDrawing: roundInfo.isDrawing || false,\n    });\n  },\n\n  updateTimeRemaining: (time) => {\n    set({ timeRemaining: time });\n  },\n\n  addDrawingData: (data) => {\n    set((state) => ({\n      drawingData: [...state.drawingData, data],\n    }));\n  },\n\n  clearDrawing: () => {\n    set({ drawingData: [] });\n  },\n\n  sendClearCanvas: () => {\n    const { isSocketConnected } = get();\n    if (isSocketConnected) {\n      socketManager.sendClearCanvas();\n    } else {\n      console.error('Cannot clear canvas: Socket not connected');\n    }\n  },\n\n  setBrushColor: (color) => {\n    set({ brushColor: color });\n  },\n\n  setBrushSize: (size) => {\n    set({ brushSize: size });\n  },\n\n  setDrawingMode: (mode) => {\n    set({ isDrawingMode: mode });\n  },\n\n  addChatMessage: (message) => {\n    set((state) => ({\n      chatMessages: [...state.chatMessages, message],\n    }));\n  },\n\n  addChatMessageFromSocket: (messageData) => {\n    // Format the message data to match the expected structure\n    const formattedMessage = {\n      username: messageData.username || 'Unknown',\n      message: messageData.message || '',\n      timestamp: (messageData.timestamp || Date.now() / 1000) * 1000, // Convert to milliseconds for JavaScript Date\n      isCorrectGuess: false,\n      isSystemMessage: false,\n    };\n    \n    set((state) => ({\n      chatMessages: [...state.chatMessages, formattedMessage],\n    }));\n  },\n\n  addCorrectGuessMessage: (messageData) => {\n    // Format correct guess message\n    const formattedMessage = {\n      username: messageData.username || 'Unknown',\n      message: messageData.message || 'Guessed correctly!',\n      timestamp: Date.now(),\n      isCorrectGuess: true,\n      isSystemMessage: true,\n    };\n    \n    set((state) => ({\n      chatMessages: [...state.chatMessages, formattedMessage],\n    }));\n  },\n\n  setGuessInput: (input) => {\n    set({ guessInput: input });\n  },\n\n  sendGuess: () => {\n    const { guessInput, isSocketConnected } = get();\n    if (guessInput.trim() && isSocketConnected) {\n      socketManager.sendGuess(guessInput.trim());\n      set({ guessInput: '' });\n    } else if (!isSocketConnected) {\n      console.error('Cannot send guess: Socket not connected');\n    }\n  },\n\n  sendChatMessage: (message) => {\n    const { isSocketConnected } = get();\n    if (isSocketConnected) {\n      socketManager.sendChatMessage(message);\n    } else {\n      console.error('Cannot send chat message: Socket not connected');\n    }\n  },\n\n  sendDrawData: (drawData) => {\n    const { isSocketConnected } = get();\n    if (isSocketConnected) {\n      // Add timestamp to drawing data\n      const dataWithTimestamp = {\n        ...drawData,\n        timestamp: Date.now()\n      };\n      socketManager.sendDrawData(\n        dataWithTimestamp.x,\n        dataWithTimestamp.y,\n        dataWithTimestamp.is_drawing,\n        dataWithTimestamp.color,\n        dataWithTimestamp.brush_size,\n        dataWithTimestamp.is_first_point || false\n      );\n    } else {\n      console.error('Cannot send draw data: Socket not connected');\n    }\n  },\n\n  startGame: () => {\n    const { isSocketConnected } = get();\n    if (isSocketConnected) {\n      socketManager.startGame();\n    } else {\n      console.error('Cannot start game: Socket not connected');\n    }\n  },\n\n  setReady: (ready) => {\n    const { isSocketConnected } = get();\n    if (isSocketConnected) {\n      socketManager.setReady(ready);\n    } else {\n      console.error('Cannot set ready status: Socket not connected');\n    }\n  },\n\n  skipTurn: () => {\n    const { isSocketConnected } = get();\n    if (isSocketConnected) {\n      socketManager.skipTurn();\n    } else {\n      console.error('Cannot skip turn: Socket not connected');\n    }\n  },\n\n  resetGameState: () => {\n    set({\n      gameState: null,\n      isGameActive: false,\n      currentRound: 0,\n      timeRemaining: 0,\n      currentWord: '',\n      isDrawing: false,\n      currentDrawer: null,\n      drawingData: [],\n      chatMessages: [],\n    });\n  },\n\n  // Socket event handlers\n  handleSocketConnected: (data) => {\n    set({ isSocketConnected: data.connected });\n  },\n\n  handleAuthenticated: (data) => {\n    console.log('Authenticated:', data);\n  },\n\n  handleRoomJoined: (data) => {\n    set({\n      currentRoom: { id: data.room_id },\n      players: data.players || [],\n      isInRoom: true,\n    });\n  },\n\n  handlePlayerJoined: (data) => {\n    set((state) => {\n      // Check if player already exists\n      const existingPlayer = state.players.find(p => p.id === data.user_id);\n      if (existingPlayer) {\n        return state; // Player already exists, don't add duplicate\n      }\n      \n      return {\n        players: [...state.players, {\n          id: data.user_id,\n          username: data.username,\n          score: 0,\n          ready: false,\n        }],\n      };\n    });\n  },\n\n  handlePlayerLeft: (data) => {\n    set((state) => ({\n      players: state.players.filter((p) => p.id !== data.user_id),\n    }));\n  },\n\n  handleGameStarted: (data) => {\n    set({ isGameActive: true });\n  },\n\n  handleRoundStarted: (data) => {\n    set({\n      currentRound: data.round,\n      timeRemaining: data.time_remaining,\n      drawingData: [], // Clear drawing data for new round\n    });\n    console.log('Round started:', data);\n  },\n\n  handleWordAssigned: (data) => {\n    set({\n      currentWord: data.word,\n    });\n  },\n\n  handleCorrectGuess: (data) => {\n    // Add correct guess message to chat\n    get().addCorrectGuessMessage(data);\n    \n    // Update guess progress\n    set((state) => {\n      const newGuessedPlayers = [...state.guessedPlayers, data.user_id];\n      const nonDrawerPlayers = state.players.filter(p => p.id !== state.currentDrawer);\n      const totalNonDrawers = nonDrawerPlayers.length;\n      const guessedCount = newGuessedPlayers.length;\n      \n      return {\n        guessedPlayers: newGuessedPlayers,\n        guessProgress: {\n          guessed: guessedCount,\n          total: totalNonDrawers\n        }\n      };\n    });\n  },\n\n  handleRoundEnded: (data) => {\n    set({\n      currentWord: '',\n      drawingData: [],\n    });\n    console.log('Round ended:', data);\n  },\n\n  handleGameEnded: (data) => {\n    set({\n      isGameActive: false,\n      currentRound: 0,\n      timeRemaining: 0,\n      currentWord: '',\n      drawingData: [],\n    });\n  },\n\n  handleTimeUpdate: (data) => {\n    set({ timeRemaining: data.time_remaining });\n    console.log('Time update:', data.time_remaining);\n  },\n\n  handleCanvasCleared: (data) => {\n    set({ drawingData: [] });\n  },\n\n  handleRoomDeleted: (data) => {\n    set({\n      currentRoom: null,\n      players: [],\n      isInRoom: false,\n      gameState: null,\n      isGameActive: false,\n      chatMessages: [],\n      drawingData: [],\n    });\n  },\n\n  handlePlayersUpdate: (data) => {\n    set({ players: data.players || [] });\n  },\n\n  // Handle incoming drawing data from other players\n  handleDrawData: (data) => {\n    if (data && data.data) {\n      // Add the received drawing data to the store\n      set((state) => ({\n        drawingData: [...state.drawingData, data.data],\n      }));\n    }\n  },\n\n  // Handle incoming game state updates\n  handleGameState: (data) => {\n    set((state) => ({\n      gameState: { ...state.gameState, ...data },\n      isGameActive: data.game_started !== undefined ? data.game_started : state.isGameActive,\n      currentRound: data.current_round || state.currentRound,\n      totalRounds: data.max_rounds || state.totalRounds,\n      currentWord: data.word || state.currentWord,\n      timeRemaining: data.time_remaining || state.timeRemaining,\n      currentDrawer: data.current_drawer_id || state.currentDrawer,\n      isDrawing: data.is_drawer || false,\n    }));\n    console.log('Game state update:', data);\n  },\n}));\n\nexport default useGameStore; "],"mappings":"AAAA,SAASA,MAAM,QAAQ,SAAS;AAChC,OAAOC,aAAa,MAAM,iBAAiB;AAE3C,MAAMC,YAAY,GAAGF,MAAM,CAAC,CAACG,GAAG,EAAEC,GAAG,MAAM;EACzC;EACAC,WAAW,EAAE,IAAI;EACjBC,OAAO,EAAE,EAAE;EACXC,QAAQ,EAAE,KAAK;EAEf;EACAC,SAAS,EAAE,IAAI;EACfC,YAAY,EAAE,KAAK;EACnBC,YAAY,EAAE,CAAC;EACfC,WAAW,EAAE,CAAC;EACdC,aAAa,EAAE,CAAC;EAChBC,WAAW,EAAE,EAAE;EACfC,SAAS,EAAE,KAAK;EAChBC,aAAa,EAAE,IAAI;EACnBC,cAAc,EAAE,EAAE;EAClBC,aAAa,EAAE;IAAEC,OAAO,EAAE,CAAC;IAAEC,KAAK,EAAE;EAAE,CAAC;EAEvC;EACAC,WAAW,EAAE,EAAE;EACfC,UAAU,EAAE,SAAS;EACrBC,SAAS,EAAE,CAAC;EACZC,aAAa,EAAE,KAAK;EAEpB;EACAC,YAAY,EAAE,EAAE;EAChBC,UAAU,EAAE,EAAE;EAEd;EACAC,iBAAiB,EAAE,KAAK;EAExB;EACAC,SAAS,EAAE,KAAK;EAChBC,KAAK,EAAE,IAAI;EAEX;EACAC,kBAAkB,EAAGC,SAAS,IAAK;IACjC3B,GAAG,CAAC;MAAEuB,iBAAiB,EAAEI;IAAU,CAAC,CAAC;EACvC,CAAC;EAEDC,QAAQ,EAAGC,MAAM,IAAK;IACpB7B,GAAG,CAAC;MAAEwB,SAAS,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAC,CAAC;IACrC3B,aAAa,CAAC8B,QAAQ,CAACC,MAAM,CAAC;IAC9B7B,GAAG,CAAC;MAAEI,QAAQ,EAAE,IAAI;MAAEoB,SAAS,EAAE;IAAM,CAAC,CAAC;EAC3C,CAAC;EAEDM,SAAS,EAAEA,CAAA,KAAM;IACfhC,aAAa,CAACgC,SAAS,CAAC,CAAC;IACzB9B,GAAG,CAAC;MACFE,WAAW,EAAE,IAAI;MACjBC,OAAO,EAAE,EAAE;MACXC,QAAQ,EAAE,KAAK;MACfC,SAAS,EAAE,IAAI;MACfC,YAAY,EAAE,KAAK;MACnBe,YAAY,EAAE,EAAE;MAChBJ,WAAW,EAAE;IACf,CAAC,CAAC;EACJ,CAAC;EAEDc,UAAU,EAAEA,CAAA,KAAM;IAChBjC,aAAa,CAACiC,UAAU,CAAC,CAAC;IAC1B/B,GAAG,CAAC;MACFE,WAAW,EAAE,IAAI;MACjBC,OAAO,EAAE,EAAE;MACXC,QAAQ,EAAE,KAAK;MACfC,SAAS,EAAE,IAAI;MACfC,YAAY,EAAE,KAAK;MACnBe,YAAY,EAAE,EAAE;MAChBJ,WAAW,EAAE;IACf,CAAC,CAAC;EACJ,CAAC;EAEDe,WAAW,EAAGC,QAAQ,IAAK;IACzBjC,GAAG,CAAC;MAAEE,WAAW,EAAE+B;IAAS,CAAC,CAAC;EAChC,CAAC;EAEDC,UAAU,EAAG/B,OAAO,IAAK;IACvB;IACA,MAAMgC,aAAa,GAAGhC,OAAO,CAACiC,MAAM,CAAC,CAACC,MAAM,EAAEC,KAAK,EAAEC,IAAI,KACvDD,KAAK,KAAKC,IAAI,CAACC,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKL,MAAM,CAACK,EAAE,CAClD,CAAC;IACD1C,GAAG,CAAC;MAAEG,OAAO,EAAEgC;IAAc,CAAC,CAAC;EACjC,CAAC;EAEDQ,SAAS,EAAGN,MAAM,IAAK;IACrBrC,GAAG,CAAE4C,KAAK,IAAK;MACb;MACA,MAAMC,cAAc,GAAGD,KAAK,CAACzC,OAAO,CAAC2C,IAAI,CAACL,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKL,MAAM,CAACK,EAAE,CAAC;MAClE,IAAIG,cAAc,EAAE;QAClB,OAAOD,KAAK,CAAC,CAAC;MAChB;MAEA,OAAO;QACLzC,OAAO,EAAE,CAAC,GAAGyC,KAAK,CAACzC,OAAO,EAAEkC,MAAM;MACpC,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAEDU,YAAY,EAAGC,QAAQ,IAAK;IAC1BhD,GAAG,CAAE4C,KAAK,KAAM;MACdzC,OAAO,EAAEyC,KAAK,CAACzC,OAAO,CAACiC,MAAM,CAAEK,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKM,QAAQ;IACxD,CAAC,CAAC,CAAC;EACL,CAAC;EAEDC,YAAY,EAAG5C,SAAS,IAAK;IAC3BL,GAAG,CAAE4C,KAAK,KAAM;MACdvC,SAAS,EAAE;QAAE,GAAGuC,KAAK,CAACvC,SAAS;QAAE,GAAGA;MAAU,CAAC;MAC/CC,YAAY,EAAED,SAAS,CAAC6C,YAAY,KAAKC,SAAS,GAAG9C,SAAS,CAAC6C,YAAY,GAAGN,KAAK,CAACtC,YAAY;MAChGC,YAAY,EAAEF,SAAS,CAAC+C,aAAa,IAAIR,KAAK,CAACrC,YAAY;MAC3DC,WAAW,EAAEH,SAAS,CAACgD,UAAU,IAAIT,KAAK,CAACpC,WAAW;MACtDE,WAAW,EAAEL,SAAS,CAACiD,IAAI,IAAIV,KAAK,CAAClC,WAAW;MAChDD,aAAa,EAAEJ,SAAS,CAACkD,cAAc,IAAIX,KAAK,CAACnC,aAAa;MAC9DG,aAAa,EAAEP,SAAS,CAACmD,iBAAiB,IAAIZ,KAAK,CAAChC,aAAa;MACjED,SAAS,EAAEN,SAAS,CAACoD,SAAS,IAAI;IACpC,CAAC,CAAC,CAAC;EACL,CAAC;EAEDC,YAAY,EAAGC,SAAS,IAAK;IAC3B3D,GAAG,CAAC;MACFO,YAAY,EAAEoD,SAAS,CAACC,KAAK;MAC7BpD,WAAW,EAAEmD,SAAS,CAACnD,WAAW;MAClCC,aAAa,EAAEkD,SAAS,CAAClD,aAAa;MACtCC,WAAW,EAAEiD,SAAS,CAACL,IAAI,IAAI,EAAE;MACjC1C,aAAa,EAAE+C,SAAS,CAACE,MAAM;MAC/BlD,SAAS,EAAEgD,SAAS,CAAChD,SAAS,IAAI;IACpC,CAAC,CAAC;EACJ,CAAC;EAEDmD,mBAAmB,EAAGC,IAAI,IAAK;IAC7B/D,GAAG,CAAC;MAAES,aAAa,EAAEsD;IAAK,CAAC,CAAC;EAC9B,CAAC;EAEDC,cAAc,EAAGC,IAAI,IAAK;IACxBjE,GAAG,CAAE4C,KAAK,KAAM;MACd3B,WAAW,EAAE,CAAC,GAAG2B,KAAK,CAAC3B,WAAW,EAAEgD,IAAI;IAC1C,CAAC,CAAC,CAAC;EACL,CAAC;EAEDC,YAAY,EAAEA,CAAA,KAAM;IAClBlE,GAAG,CAAC;MAAEiB,WAAW,EAAE;IAAG,CAAC,CAAC;EAC1B,CAAC;EAEDkD,eAAe,EAAEA,CAAA,KAAM;IACrB,MAAM;MAAE5C;IAAkB,CAAC,GAAGtB,GAAG,CAAC,CAAC;IACnC,IAAIsB,iBAAiB,EAAE;MACrBzB,aAAa,CAACqE,eAAe,CAAC,CAAC;IACjC,CAAC,MAAM;MACLC,OAAO,CAAC3C,KAAK,CAAC,2CAA2C,CAAC;IAC5D;EACF,CAAC;EAED4C,aAAa,EAAGC,KAAK,IAAK;IACxBtE,GAAG,CAAC;MAAEkB,UAAU,EAAEoD;IAAM,CAAC,CAAC;EAC5B,CAAC;EAEDC,YAAY,EAAGC,IAAI,IAAK;IACtBxE,GAAG,CAAC;MAAEmB,SAAS,EAAEqD;IAAK,CAAC,CAAC;EAC1B,CAAC;EAEDC,cAAc,EAAGC,IAAI,IAAK;IACxB1E,GAAG,CAAC;MAAEoB,aAAa,EAAEsD;IAAK,CAAC,CAAC;EAC9B,CAAC;EAEDC,cAAc,EAAGC,OAAO,IAAK;IAC3B5E,GAAG,CAAE4C,KAAK,KAAM;MACdvB,YAAY,EAAE,CAAC,GAAGuB,KAAK,CAACvB,YAAY,EAAEuD,OAAO;IAC/C,CAAC,CAAC,CAAC;EACL,CAAC;EAEDC,wBAAwB,EAAGC,WAAW,IAAK;IACzC;IACA,MAAMC,gBAAgB,GAAG;MACvBC,QAAQ,EAAEF,WAAW,CAACE,QAAQ,IAAI,SAAS;MAC3CJ,OAAO,EAAEE,WAAW,CAACF,OAAO,IAAI,EAAE;MAClCK,SAAS,EAAE,CAACH,WAAW,CAACG,SAAS,IAAIC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,IAAI,IAAI;MAAE;MAChEC,cAAc,EAAE,KAAK;MACrBC,eAAe,EAAE;IACnB,CAAC;IAEDrF,GAAG,CAAE4C,KAAK,KAAM;MACdvB,YAAY,EAAE,CAAC,GAAGuB,KAAK,CAACvB,YAAY,EAAE0D,gBAAgB;IACxD,CAAC,CAAC,CAAC;EACL,CAAC;EAEDO,sBAAsB,EAAGR,WAAW,IAAK;IACvC;IACA,MAAMC,gBAAgB,GAAG;MACvBC,QAAQ,EAAEF,WAAW,CAACE,QAAQ,IAAI,SAAS;MAC3CJ,OAAO,EAAEE,WAAW,CAACF,OAAO,IAAI,oBAAoB;MACpDK,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC;MACrBC,cAAc,EAAE,IAAI;MACpBC,eAAe,EAAE;IACnB,CAAC;IAEDrF,GAAG,CAAE4C,KAAK,KAAM;MACdvB,YAAY,EAAE,CAAC,GAAGuB,KAAK,CAACvB,YAAY,EAAE0D,gBAAgB;IACxD,CAAC,CAAC,CAAC;EACL,CAAC;EAEDQ,aAAa,EAAGC,KAAK,IAAK;IACxBxF,GAAG,CAAC;MAAEsB,UAAU,EAAEkE;IAAM,CAAC,CAAC;EAC5B,CAAC;EAEDC,SAAS,EAAEA,CAAA,KAAM;IACf,MAAM;MAAEnE,UAAU;MAAEC;IAAkB,CAAC,GAAGtB,GAAG,CAAC,CAAC;IAC/C,IAAIqB,UAAU,CAACoE,IAAI,CAAC,CAAC,IAAInE,iBAAiB,EAAE;MAC1CzB,aAAa,CAAC2F,SAAS,CAACnE,UAAU,CAACoE,IAAI,CAAC,CAAC,CAAC;MAC1C1F,GAAG,CAAC;QAAEsB,UAAU,EAAE;MAAG,CAAC,CAAC;IACzB,CAAC,MAAM,IAAI,CAACC,iBAAiB,EAAE;MAC7B6C,OAAO,CAAC3C,KAAK,CAAC,yCAAyC,CAAC;IAC1D;EACF,CAAC;EAEDkE,eAAe,EAAGf,OAAO,IAAK;IAC5B,MAAM;MAAErD;IAAkB,CAAC,GAAGtB,GAAG,CAAC,CAAC;IACnC,IAAIsB,iBAAiB,EAAE;MACrBzB,aAAa,CAAC6F,eAAe,CAACf,OAAO,CAAC;IACxC,CAAC,MAAM;MACLR,OAAO,CAAC3C,KAAK,CAAC,gDAAgD,CAAC;IACjE;EACF,CAAC;EAEDmE,YAAY,EAAGC,QAAQ,IAAK;IAC1B,MAAM;MAAEtE;IAAkB,CAAC,GAAGtB,GAAG,CAAC,CAAC;IACnC,IAAIsB,iBAAiB,EAAE;MACrB;MACA,MAAMuE,iBAAiB,GAAG;QACxB,GAAGD,QAAQ;QACXZ,SAAS,EAAEC,IAAI,CAACC,GAAG,CAAC;MACtB,CAAC;MACDrF,aAAa,CAAC8F,YAAY,CACxBE,iBAAiB,CAACC,CAAC,EACnBD,iBAAiB,CAACE,CAAC,EACnBF,iBAAiB,CAACG,UAAU,EAC5BH,iBAAiB,CAACxB,KAAK,EACvBwB,iBAAiB,CAACI,UAAU,EAC5BJ,iBAAiB,CAACK,cAAc,IAAI,KACtC,CAAC;IACH,CAAC,MAAM;MACL/B,OAAO,CAAC3C,KAAK,CAAC,6CAA6C,CAAC;IAC9D;EACF,CAAC;EAED2E,SAAS,EAAEA,CAAA,KAAM;IACf,MAAM;MAAE7E;IAAkB,CAAC,GAAGtB,GAAG,CAAC,CAAC;IACnC,IAAIsB,iBAAiB,EAAE;MACrBzB,aAAa,CAACsG,SAAS,CAAC,CAAC;IAC3B,CAAC,MAAM;MACLhC,OAAO,CAAC3C,KAAK,CAAC,yCAAyC,CAAC;IAC1D;EACF,CAAC;EAED4E,QAAQ,EAAGC,KAAK,IAAK;IACnB,MAAM;MAAE/E;IAAkB,CAAC,GAAGtB,GAAG,CAAC,CAAC;IACnC,IAAIsB,iBAAiB,EAAE;MACrBzB,aAAa,CAACuG,QAAQ,CAACC,KAAK,CAAC;IAC/B,CAAC,MAAM;MACLlC,OAAO,CAAC3C,KAAK,CAAC,+CAA+C,CAAC;IAChE;EACF,CAAC;EAED8E,QAAQ,EAAEA,CAAA,KAAM;IACd,MAAM;MAAEhF;IAAkB,CAAC,GAAGtB,GAAG,CAAC,CAAC;IACnC,IAAIsB,iBAAiB,EAAE;MACrBzB,aAAa,CAACyG,QAAQ,CAAC,CAAC;IAC1B,CAAC,MAAM;MACLnC,OAAO,CAAC3C,KAAK,CAAC,wCAAwC,CAAC;IACzD;EACF,CAAC;EAED+E,cAAc,EAAEA,CAAA,KAAM;IACpBxG,GAAG,CAAC;MACFK,SAAS,EAAE,IAAI;MACfC,YAAY,EAAE,KAAK;MACnBC,YAAY,EAAE,CAAC;MACfE,aAAa,EAAE,CAAC;MAChBC,WAAW,EAAE,EAAE;MACfC,SAAS,EAAE,KAAK;MAChBC,aAAa,EAAE,IAAI;MACnBK,WAAW,EAAE,EAAE;MACfI,YAAY,EAAE;IAChB,CAAC,CAAC;EACJ,CAAC;EAED;EACAoF,qBAAqB,EAAGxC,IAAI,IAAK;IAC/BjE,GAAG,CAAC;MAAEuB,iBAAiB,EAAE0C,IAAI,CAACtC;IAAU,CAAC,CAAC;EAC5C,CAAC;EAED+E,mBAAmB,EAAGzC,IAAI,IAAK;IAC7BG,OAAO,CAACuC,GAAG,CAAC,gBAAgB,EAAE1C,IAAI,CAAC;EACrC,CAAC;EAED2C,gBAAgB,EAAG3C,IAAI,IAAK;IAC1BjE,GAAG,CAAC;MACFE,WAAW,EAAE;QAAEwC,EAAE,EAAEuB,IAAI,CAAC4C;MAAQ,CAAC;MACjC1G,OAAO,EAAE8D,IAAI,CAAC9D,OAAO,IAAI,EAAE;MAC3BC,QAAQ,EAAE;IACZ,CAAC,CAAC;EACJ,CAAC;EAED0G,kBAAkB,EAAG7C,IAAI,IAAK;IAC5BjE,GAAG,CAAE4C,KAAK,IAAK;MACb;MACA,MAAMC,cAAc,GAAGD,KAAK,CAACzC,OAAO,CAAC2C,IAAI,CAACL,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKuB,IAAI,CAAC8C,OAAO,CAAC;MACrE,IAAIlE,cAAc,EAAE;QAClB,OAAOD,KAAK,CAAC,CAAC;MAChB;MAEA,OAAO;QACLzC,OAAO,EAAE,CAAC,GAAGyC,KAAK,CAACzC,OAAO,EAAE;UAC1BuC,EAAE,EAAEuB,IAAI,CAAC8C,OAAO;UAChB/B,QAAQ,EAAEf,IAAI,CAACe,QAAQ;UACvBgC,KAAK,EAAE,CAAC;UACRV,KAAK,EAAE;QACT,CAAC;MACH,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAEDW,gBAAgB,EAAGhD,IAAI,IAAK;IAC1BjE,GAAG,CAAE4C,KAAK,KAAM;MACdzC,OAAO,EAAEyC,KAAK,CAACzC,OAAO,CAACiC,MAAM,CAAEK,CAAC,IAAKA,CAAC,CAACC,EAAE,KAAKuB,IAAI,CAAC8C,OAAO;IAC5D,CAAC,CAAC,CAAC;EACL,CAAC;EAEDG,iBAAiB,EAAGjD,IAAI,IAAK;IAC3BjE,GAAG,CAAC;MAAEM,YAAY,EAAE;IAAK,CAAC,CAAC;EAC7B,CAAC;EAED6G,kBAAkB,EAAGlD,IAAI,IAAK;IAC5BjE,GAAG,CAAC;MACFO,YAAY,EAAE0D,IAAI,CAACL,KAAK;MACxBnD,aAAa,EAAEwD,IAAI,CAACV,cAAc;MAClCtC,WAAW,EAAE,EAAE,CAAE;IACnB,CAAC,CAAC;IACFmD,OAAO,CAACuC,GAAG,CAAC,gBAAgB,EAAE1C,IAAI,CAAC;EACrC,CAAC;EAEDmD,kBAAkB,EAAGnD,IAAI,IAAK;IAC5BjE,GAAG,CAAC;MACFU,WAAW,EAAEuD,IAAI,CAACX;IACpB,CAAC,CAAC;EACJ,CAAC;EAED+D,kBAAkB,EAAGpD,IAAI,IAAK;IAC5B;IACAhE,GAAG,CAAC,CAAC,CAACqF,sBAAsB,CAACrB,IAAI,CAAC;;IAElC;IACAjE,GAAG,CAAE4C,KAAK,IAAK;MACb,MAAM0E,iBAAiB,GAAG,CAAC,GAAG1E,KAAK,CAAC/B,cAAc,EAAEoD,IAAI,CAAC8C,OAAO,CAAC;MACjE,MAAMQ,gBAAgB,GAAG3E,KAAK,CAACzC,OAAO,CAACiC,MAAM,CAACK,CAAC,IAAIA,CAAC,CAACC,EAAE,KAAKE,KAAK,CAAChC,aAAa,CAAC;MAChF,MAAM4G,eAAe,GAAGD,gBAAgB,CAACE,MAAM;MAC/C,MAAMC,YAAY,GAAGJ,iBAAiB,CAACG,MAAM;MAE7C,OAAO;QACL5G,cAAc,EAAEyG,iBAAiB;QACjCxG,aAAa,EAAE;UACbC,OAAO,EAAE2G,YAAY;UACrB1G,KAAK,EAAEwG;QACT;MACF,CAAC;IACH,CAAC,CAAC;EACJ,CAAC;EAEDG,gBAAgB,EAAG1D,IAAI,IAAK;IAC1BjE,GAAG,CAAC;MACFU,WAAW,EAAE,EAAE;MACfO,WAAW,EAAE;IACf,CAAC,CAAC;IACFmD,OAAO,CAACuC,GAAG,CAAC,cAAc,EAAE1C,IAAI,CAAC;EACnC,CAAC;EAED2D,eAAe,EAAG3D,IAAI,IAAK;IACzBjE,GAAG,CAAC;MACFM,YAAY,EAAE,KAAK;MACnBC,YAAY,EAAE,CAAC;MACfE,aAAa,EAAE,CAAC;MAChBC,WAAW,EAAE,EAAE;MACfO,WAAW,EAAE;IACf,CAAC,CAAC;EACJ,CAAC;EAED4G,gBAAgB,EAAG5D,IAAI,IAAK;IAC1BjE,GAAG,CAAC;MAAES,aAAa,EAAEwD,IAAI,CAACV;IAAe,CAAC,CAAC;IAC3Ca,OAAO,CAACuC,GAAG,CAAC,cAAc,EAAE1C,IAAI,CAACV,cAAc,CAAC;EAClD,CAAC;EAEDuE,mBAAmB,EAAG7D,IAAI,IAAK;IAC7BjE,GAAG,CAAC;MAAEiB,WAAW,EAAE;IAAG,CAAC,CAAC;EAC1B,CAAC;EAED8G,iBAAiB,EAAG9D,IAAI,IAAK;IAC3BjE,GAAG,CAAC;MACFE,WAAW,EAAE,IAAI;MACjBC,OAAO,EAAE,EAAE;MACXC,QAAQ,EAAE,KAAK;MACfC,SAAS,EAAE,IAAI;MACfC,YAAY,EAAE,KAAK;MACnBe,YAAY,EAAE,EAAE;MAChBJ,WAAW,EAAE;IACf,CAAC,CAAC;EACJ,CAAC;EAED+G,mBAAmB,EAAG/D,IAAI,IAAK;IAC7BjE,GAAG,CAAC;MAAEG,OAAO,EAAE8D,IAAI,CAAC9D,OAAO,IAAI;IAAG,CAAC,CAAC;EACtC,CAAC;EAED;EACA8H,cAAc,EAAGhE,IAAI,IAAK;IACxB,IAAIA,IAAI,IAAIA,IAAI,CAACA,IAAI,EAAE;MACrB;MACAjE,GAAG,CAAE4C,KAAK,KAAM;QACd3B,WAAW,EAAE,CAAC,GAAG2B,KAAK,CAAC3B,WAAW,EAAEgD,IAAI,CAACA,IAAI;MAC/C,CAAC,CAAC,CAAC;IACL;EACF,CAAC;EAED;EACAiE,eAAe,EAAGjE,IAAI,IAAK;IACzBjE,GAAG,CAAE4C,KAAK,KAAM;MACdvC,SAAS,EAAE;QAAE,GAAGuC,KAAK,CAACvC,SAAS;QAAE,GAAG4D;MAAK,CAAC;MAC1C3D,YAAY,EAAE2D,IAAI,CAACf,YAAY,KAAKC,SAAS,GAAGc,IAAI,CAACf,YAAY,GAAGN,KAAK,CAACtC,YAAY;MACtFC,YAAY,EAAE0D,IAAI,CAACb,aAAa,IAAIR,KAAK,CAACrC,YAAY;MACtDC,WAAW,EAAEyD,IAAI,CAACZ,UAAU,IAAIT,KAAK,CAACpC,WAAW;MACjDE,WAAW,EAAEuD,IAAI,CAACX,IAAI,IAAIV,KAAK,CAAClC,WAAW;MAC3CD,aAAa,EAAEwD,IAAI,CAACV,cAAc,IAAIX,KAAK,CAACnC,aAAa;MACzDG,aAAa,EAAEqD,IAAI,CAACT,iBAAiB,IAAIZ,KAAK,CAAChC,aAAa;MAC5DD,SAAS,EAAEsD,IAAI,CAACR,SAAS,IAAI;IAC/B,CAAC,CAAC,CAAC;IACHW,OAAO,CAACuC,GAAG,CAAC,oBAAoB,EAAE1C,IAAI,CAAC;EACzC;AACF,CAAC,CAAC,CAAC;AAEH,eAAelE,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}