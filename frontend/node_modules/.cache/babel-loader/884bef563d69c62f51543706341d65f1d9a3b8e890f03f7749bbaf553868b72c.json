{"ast":null,"code":"class SocketManager {\n  constructor() {\n    this.socket = null;\n    this.isConnected = false;\n    this.eventListeners = new Map();\n    this.connectionAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 1000;\n    this.messageQueue = [];\n    this.reconnectTimer = null;\n  }\n  connect(token) {\n    if (this.socket && this.isConnected) {\n      console.log('Socket already connected');\n      return;\n    }\n    console.log('Connecting to socket server...');\n    try {\n      // Create WebSocket connection to our WebSocket bridge\n      this.socket = new WebSocket('ws://localhost:8002');\n      this.socket.onopen = () => {\n        console.log('‚úÖ Connected to socket server');\n        this.isConnected = true;\n        this.connectionAttempts = 0;\n\n        // Notify store about connection\n        this.emit('socket_connected', {\n          connected: true\n        });\n\n        // Authenticate after connection\n        if (token) {\n          console.log('Authenticating with token...');\n          this.sendMessage({\n            type: 'authenticate',\n            token: token\n          });\n        } else {\n          console.log('No token provided for authentication');\n        }\n      };\n      this.socket.onclose = event => {\n        console.log('‚ùå Disconnected from socket server:', event.code, event.reason);\n        this.isConnected = false;\n\n        // Notify store about disconnection\n        this.emit('socket_connected', {\n          connected: false\n        });\n\n        // Attempt to reconnect\n        if (this.connectionAttempts < this.maxReconnectAttempts) {\n          this.connectionAttempts++;\n          console.log(`Attempting to reconnect (${this.connectionAttempts}/${this.maxReconnectAttempts})...`);\n          this.reconnectTimer = setTimeout(() => {\n            this.connect(token);\n          }, this.reconnectDelay * this.connectionAttempts);\n        }\n      };\n      this.socket.onerror = error => {\n        console.error('‚ùå Socket error:', error);\n        this.isConnected = false;\n        this.emit('socket_connected', {\n          connected: false\n        });\n      };\n      this.socket.onmessage = event => {\n        try {\n          const message = JSON.parse(event.data);\n          console.log('üì® Received message:', message);\n          this.handleMessage(message);\n        } catch (error) {\n          console.error('‚ùå Error parsing message:', error);\n        }\n      };\n    } catch (error) {\n      console.error('‚ùå Failed to create WebSocket connection:', error);\n      this.isConnected = false;\n      this.emit('socket_connected', {\n        connected: false\n      });\n    }\n  }\n  disconnect() {\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n    }\n    this.isConnected = false;\n    this.connectionAttempts = 0;\n    console.log('üîå Disconnected from socket server');\n  }\n  sendMessage(message) {\n    if (!this.socket || !this.isConnected) {\n      console.warn('‚ö†Ô∏è Socket not connected, queuing message:', message);\n      this.messageQueue.push(message);\n      return;\n    }\n    try {\n      const messageStr = JSON.stringify(message) + '\\n';\n      this.socket.send(messageStr);\n      console.log('üì§ Sent message:', message);\n    } catch (error) {\n      console.error('‚ùå Error sending message:', error);\n    }\n  }\n  handleMessage(message) {\n    const messageType = message.type;\n\n    // Emit the message to all listeners\n    this.emit(messageType, message);\n\n    // Handle specific message types\n    switch (messageType) {\n      case 'authenticated':\n        console.log('‚úÖ Authentication successful:', message);\n        break;\n      case 'error':\n        console.error('‚ùå Server error:', message.message);\n        break;\n      case 'room_joined':\n        console.log('‚úÖ Joined room:', message);\n        break;\n      case 'player_joined':\n        console.log('üë§ Player joined:', message);\n        break;\n      case 'player_left':\n        console.log('üë§ Player left:', message);\n        break;\n      case 'player_disconnected':\n        console.log('üë§ Player disconnected:', message);\n        break;\n      case 'draw_data':\n        console.log('üé® Received draw data:', message);\n        break;\n      case 'chat_message':\n        console.log('üí¨ Received chat message:', message);\n        break;\n      case 'guess_result':\n        console.log('üéØ Guess result:', message);\n        break;\n      case 'word_guessed':\n        console.log('üéâ Word guessed:', message);\n        break;\n      case 'correct_guess':\n        console.log('üéâ Correct guess:', message);\n        break;\n      case 'player_ready':\n        console.log('‚úÖ Player ready:', message);\n        break;\n      case 'game_started':\n        console.log('üéÆ Game started:', message);\n        break;\n      case 'round_started':\n        console.log('üîÑ Round started:', message);\n        break;\n      case 'round_ended':\n        console.log('‚èπÔ∏è Round ended:', message);\n        break;\n      case 'game_ended':\n        console.log('üèÅ Game ended:', message);\n        break;\n      case 'game_state':\n        console.log('üéÆ Game state update:', message);\n        break;\n      case 'time_update':\n        console.log('‚è∞ Time update:', message);\n        break;\n      case 'drawer_changed':\n        console.log('üë®‚Äçüé® Drawer changed:', message);\n        break;\n      case 'word_assigned':\n        console.log('üìù Word assigned:', message);\n        break;\n      case 'canvas_cleared':\n        console.log('üßπ Canvas cleared:', message);\n        break;\n      default:\n        console.log('üì® Unknown message type:', messageType, message);\n    }\n  }\n\n  // Room management\n  joinRoom(roomId) {\n    this.sendMessage({\n      type: 'join_room',\n      room_id: roomId\n    });\n  }\n  leaveRoom() {\n    this.sendMessage({\n      type: 'leave_room'\n    });\n  }\n\n  // Drawing\n  sendDrawData(x, y, isDrawing, color = '#000000', brushSize = 2) {\n    this.sendMessage({\n      type: 'draw',\n      x: x,\n      y: y,\n      is_drawing: isDrawing,\n      color: color,\n      brush_size: brushSize\n    });\n  }\n\n  // Chat and guessing\n  sendChatMessage(message) {\n    this.sendMessage({\n      type: 'chat_message',\n      message: message\n    });\n  }\n  sendGuess(guess) {\n    this.sendMessage({\n      type: 'guess_word',\n      guess: guess\n    });\n  }\n\n  // Game control\n  startGame() {\n    this.sendMessage({\n      type: 'start_game'\n    });\n  }\n  setReady(ready) {\n    this.sendMessage({\n      type: 'ready',\n      ready: ready\n    });\n  }\n  skipTurn() {\n    this.sendMessage({\n      type: 'skip_turn'\n    });\n  }\n  clearCanvas() {\n    this.sendMessage({\n      type: 'clear_canvas'\n    });\n  }\n\n  // Event handling\n  on(event, callback) {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event).push(callback);\n  }\n  off(event, callback) {\n    if (this.eventListeners.has(event)) {\n      const listeners = this.eventListeners.get(event);\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n  emit(event, data) {\n    if (this.eventListeners.has(event)) {\n      // Create a copy of the listeners array to avoid modification during iteration\n      const listeners = [...this.eventListeners.get(event)];\n      listeners.forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error(`‚ùå Error in event listener for ${event}:`, error);\n        }\n      });\n    }\n  }\n\n  // Utility methods\n  isConnected() {\n    return this.isConnected;\n  }\n  getConnectionStatus() {\n    return {\n      connected: this.isConnected,\n      attempts: this.connectionAttempts,\n      maxAttempts: this.maxReconnectAttempts\n    };\n  }\n}\n\n// Create singleton instance\nconst socketManager = new SocketManager();\nexport default socketManager;","map":{"version":3,"names":["SocketManager","constructor","socket","isConnected","eventListeners","Map","connectionAttempts","maxReconnectAttempts","reconnectDelay","messageQueue","reconnectTimer","connect","token","console","log","WebSocket","onopen","emit","connected","sendMessage","type","onclose","event","code","reason","setTimeout","onerror","error","onmessage","message","JSON","parse","data","handleMessage","disconnect","clearTimeout","close","warn","push","messageStr","stringify","send","messageType","joinRoom","roomId","room_id","leaveRoom","sendDrawData","x","y","isDrawing","color","brushSize","is_drawing","brush_size","sendChatMessage","sendGuess","guess","startGame","setReady","ready","skipTurn","clearCanvas","on","callback","has","set","get","off","listeners","index","indexOf","splice","forEach","getConnectionStatus","attempts","maxAttempts","socketManager"],"sources":["/Users/walid/Documents/Networking/drawsync/frontend/src/utils/socket.js"],"sourcesContent":["class SocketManager {\n  constructor() {\n    this.socket = null;\n    this.isConnected = false;\n    this.eventListeners = new Map();\n    this.connectionAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 1000;\n    this.messageQueue = [];\n    this.reconnectTimer = null;\n  }\n\n  connect(token) {\n    if (this.socket && this.isConnected) {\n      console.log('Socket already connected');\n      return;\n    }\n\n    console.log('Connecting to socket server...');\n    \n    try {\n      // Create WebSocket connection to our WebSocket bridge\n      this.socket = new WebSocket('ws://localhost:8002');\n      \n      this.socket.onopen = () => {\n        console.log('‚úÖ Connected to socket server');\n        this.isConnected = true;\n        this.connectionAttempts = 0;\n        \n        // Notify store about connection\n        this.emit('socket_connected', { connected: true });\n        \n        // Authenticate after connection\n        if (token) {\n          console.log('Authenticating with token...');\n          this.sendMessage({\n            type: 'authenticate',\n            token: token\n          });\n        } else {\n          console.log('No token provided for authentication');\n        }\n      };\n\n      this.socket.onclose = (event) => {\n        console.log('‚ùå Disconnected from socket server:', event.code, event.reason);\n        this.isConnected = false;\n        \n        // Notify store about disconnection\n        this.emit('socket_connected', { connected: false });\n        \n        // Attempt to reconnect\n        if (this.connectionAttempts < this.maxReconnectAttempts) {\n          this.connectionAttempts++;\n          console.log(`Attempting to reconnect (${this.connectionAttempts}/${this.maxReconnectAttempts})...`);\n          \n          this.reconnectTimer = setTimeout(() => {\n            this.connect(token);\n          }, this.reconnectDelay * this.connectionAttempts);\n        }\n      };\n\n      this.socket.onerror = (error) => {\n        console.error('‚ùå Socket error:', error);\n        this.isConnected = false;\n        this.emit('socket_connected', { connected: false });\n      };\n\n      this.socket.onmessage = (event) => {\n        try {\n          const message = JSON.parse(event.data);\n          console.log('üì® Received message:', message);\n          this.handleMessage(message);\n        } catch (error) {\n          console.error('‚ùå Error parsing message:', error);\n        }\n      };\n\n    } catch (error) {\n      console.error('‚ùå Failed to create WebSocket connection:', error);\n      this.isConnected = false;\n      this.emit('socket_connected', { connected: false });\n    }\n  }\n\n  disconnect() {\n    if (this.reconnectTimer) {\n      clearTimeout(this.reconnectTimer);\n      this.reconnectTimer = null;\n    }\n    \n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n    }\n    \n    this.isConnected = false;\n    this.connectionAttempts = 0;\n    console.log('üîå Disconnected from socket server');\n  }\n\n  sendMessage(message) {\n    if (!this.socket || !this.isConnected) {\n      console.warn('‚ö†Ô∏è Socket not connected, queuing message:', message);\n      this.messageQueue.push(message);\n      return;\n    }\n\n    try {\n      const messageStr = JSON.stringify(message) + '\\n';\n      this.socket.send(messageStr);\n      console.log('üì§ Sent message:', message);\n    } catch (error) {\n      console.error('‚ùå Error sending message:', error);\n    }\n  }\n\n  handleMessage(message) {\n    const messageType = message.type;\n    \n    // Emit the message to all listeners\n    this.emit(messageType, message);\n    \n    // Handle specific message types\n    switch (messageType) {\n      case 'authenticated':\n        console.log('‚úÖ Authentication successful:', message);\n        break;\n      case 'error':\n        console.error('‚ùå Server error:', message.message);\n        break;\n      case 'room_joined':\n        console.log('‚úÖ Joined room:', message);\n        break;\n      case 'player_joined':\n        console.log('üë§ Player joined:', message);\n        break;\n      case 'player_left':\n        console.log('üë§ Player left:', message);\n        break;\n      case 'player_disconnected':\n        console.log('üë§ Player disconnected:', message);\n        break;\n      case 'draw_data':\n        console.log('üé® Received draw data:', message);\n        break;\n      case 'chat_message':\n        console.log('üí¨ Received chat message:', message);\n        break;\n      case 'guess_result':\n        console.log('üéØ Guess result:', message);\n        break;\n      case 'word_guessed':\n        console.log('üéâ Word guessed:', message);\n        break;\n      case 'correct_guess':\n        console.log('üéâ Correct guess:', message);\n        break;\n      case 'player_ready':\n        console.log('‚úÖ Player ready:', message);\n        break;\n      case 'game_started':\n        console.log('üéÆ Game started:', message);\n        break;\n      case 'round_started':\n        console.log('üîÑ Round started:', message);\n        break;\n      case 'round_ended':\n        console.log('‚èπÔ∏è Round ended:', message);\n        break;\n      case 'game_ended':\n        console.log('üèÅ Game ended:', message);\n        break;\n      case 'game_state':\n        console.log('üéÆ Game state update:', message);\n        break;\n      case 'time_update':\n        console.log('‚è∞ Time update:', message);\n        break;\n      case 'drawer_changed':\n        console.log('üë®‚Äçüé® Drawer changed:', message);\n        break;\n      case 'word_assigned':\n        console.log('üìù Word assigned:', message);\n        break;\n      case 'canvas_cleared':\n        console.log('üßπ Canvas cleared:', message);\n        break;\n      default:\n        console.log('üì® Unknown message type:', messageType, message);\n    }\n  }\n\n  // Room management\n  joinRoom(roomId) {\n    this.sendMessage({\n      type: 'join_room',\n      room_id: roomId\n    });\n  }\n\n  leaveRoom() {\n    this.sendMessage({\n      type: 'leave_room'\n    });\n  }\n\n  // Drawing\n  sendDrawData(x, y, isDrawing, color = '#000000', brushSize = 2) {\n    this.sendMessage({\n      type: 'draw',\n      x: x,\n      y: y,\n      is_drawing: isDrawing,\n      color: color,\n      brush_size: brushSize\n    });\n  }\n\n  // Chat and guessing\n  sendChatMessage(message) {\n    this.sendMessage({\n      type: 'chat_message',\n      message: message\n    });\n  }\n\n  sendGuess(guess) {\n    this.sendMessage({\n      type: 'guess_word',\n      guess: guess\n    });\n  }\n\n  // Game control\n  startGame() {\n    this.sendMessage({\n      type: 'start_game'\n    });\n  }\n\n  setReady(ready) {\n    this.sendMessage({\n      type: 'ready',\n      ready: ready\n    });\n  }\n\n  skipTurn() {\n    this.sendMessage({\n      type: 'skip_turn'\n    });\n  }\n\n  clearCanvas() {\n    this.sendMessage({\n      type: 'clear_canvas'\n    });\n  }\n\n  // Event handling\n  on(event, callback) {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event).push(callback);\n  }\n\n  off(event, callback) {\n    if (this.eventListeners.has(event)) {\n      const listeners = this.eventListeners.get(event);\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n\n  emit(event, data) {\n    if (this.eventListeners.has(event)) {\n      // Create a copy of the listeners array to avoid modification during iteration\n      const listeners = [...this.eventListeners.get(event)];\n      listeners.forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error(`‚ùå Error in event listener for ${event}:`, error);\n        }\n      });\n    }\n  }\n\n  // Utility methods\n  isConnected() {\n    return this.isConnected;\n  }\n\n  getConnectionStatus() {\n    return {\n      connected: this.isConnected,\n      attempts: this.connectionAttempts,\n      maxAttempts: this.maxReconnectAttempts\n    };\n  }\n}\n\n// Create singleton instance\nconst socketManager = new SocketManager();\n\nexport default socketManager; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}