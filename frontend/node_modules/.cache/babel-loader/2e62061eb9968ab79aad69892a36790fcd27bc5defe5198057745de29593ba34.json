{"ast":null,"code":"import io from 'socket.io-client';\nclass SocketManager {\n  constructor() {\n    this.socket = null;\n    this.isConnected = false;\n    this.eventListeners = new Map();\n    this.connectionAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 1000;\n  }\n  connect(token) {\n    if (this.socket && this.isConnected) {\n      console.log('Socket already connected');\n      return;\n    }\n    console.log('Connecting to socket server...');\n    this.socket = io('http://localhost:8001', {\n      transports: ['websocket', 'polling'],\n      timeout: 10000,\n      reconnection: true,\n      reconnectionAttempts: this.maxReconnectAttempts,\n      reconnectionDelay: this.reconnectDelay\n    });\n    this.socket.on('connect', () => {\n      console.log('‚úÖ Connected to socket server');\n      this.isConnected = true;\n      this.connectionAttempts = 0;\n\n      // Notify store about connection\n      this.emit('socket_connected', {\n        connected: true\n      });\n\n      // Authenticate after connection\n      if (token) {\n        console.log('Authenticating with token...');\n        this.socket.emit('authenticate', {\n          token\n        });\n      }\n    });\n    this.socket.on('disconnect', reason => {\n      console.log('‚ùå Disconnected from socket server:', reason);\n      this.isConnected = false;\n\n      // Notify store about disconnection\n      this.emit('socket_connected', {\n        connected: false\n      });\n      if (reason === 'io server disconnect') {\n        // the disconnection was initiated by the server, you need to reconnect manually\n        console.log('Server disconnected, attempting to reconnect...');\n        this.socket.connect();\n      }\n    });\n    this.socket.on('connect_error', error => {\n      console.error('‚ùå Socket connection error:', error);\n      this.isConnected = false;\n      this.connectionAttempts++;\n\n      // Notify store about connection error\n      this.emit('socket_connected', {\n        connected: false,\n        error: error.message\n      });\n      if (this.connectionAttempts < this.maxReconnectAttempts) {\n        console.log(`Retrying connection (${this.connectionAttempts}/${this.maxReconnectAttempts})...`);\n      } else {\n        console.error('Max reconnection attempts reached');\n      }\n    });\n    this.socket.on('error', error => {\n      console.error('‚ùå Socket error:', error);\n    });\n\n    // Set up event listeners\n    this.setupEventListeners();\n  }\n  disconnect() {\n    if (this.socket) {\n      console.log('Disconnecting from socket server...');\n      this.socket.disconnect();\n      this.socket = null;\n      this.isConnected = false;\n      this.connectionAttempts = 0;\n\n      // Notify store about disconnection\n      this.emit('socket_connected', {\n        connected: false\n      });\n    }\n  }\n  setupEventListeners() {\n    // Authentication events\n    this.socket.on('authenticated', data => {\n      console.log('‚úÖ Authentication successful:', data);\n      this.emit('authenticated', data);\n    });\n\n    // Room events\n    this.socket.on('room_joined', data => {\n      console.log('‚úÖ Joined room:', data);\n      this.emit('room_joined', data);\n    });\n    this.socket.on('player_joined', data => {\n      console.log('üë§ Player joined:', data);\n      this.emit('player_joined', data);\n    });\n    this.socket.on('player_left', data => {\n      console.log('üë§ Player left:', data);\n      this.emit('player_left', data);\n    });\n    this.socket.on('player_disconnected', data => {\n      console.log('üë§ Player disconnected:', data);\n      this.emit('player_disconnected', data);\n    });\n\n    // Game events\n    this.socket.on('draw_data', data => {\n      this.emit('draw_data', data);\n    });\n    this.socket.on('chat_message', data => {\n      console.log('üí¨ Received chat message:', data);\n      this.emit('chat_message', data);\n    });\n    this.socket.on('guess_result', data => {\n      console.log('üéØ Guess result:', data);\n      this.emit('guess_result', data);\n    });\n    this.socket.on('word_guessed', data => {\n      console.log('üéâ Word guessed:', data);\n      this.emit('word_guessed', data);\n    });\n    this.socket.on('player_ready', data => {\n      console.log('‚úÖ Player ready:', data);\n      this.emit('player_ready', data);\n    });\n    this.socket.on('game_started', data => {\n      console.log('üéÆ Game started:', data);\n      this.emit('game_started', data);\n    });\n    this.socket.on('round_started', data => {\n      console.log('üîÑ Round started:', data);\n      this.emit('round_started', data);\n    });\n    this.socket.on('round_ended', data => {\n      console.log('‚èπÔ∏è Round ended:', data);\n      this.emit('round_ended', data);\n    });\n    this.socket.on('game_ended', data => {\n      console.log('üèÅ Game ended:', data);\n      this.emit('game_ended', data);\n    });\n    this.socket.on('game_state', data => {\n      console.log('üéÆ Game state update:', data);\n      this.emit('game_state', data);\n    });\n  }\n\n  // Event listener management\n  on(event, callback) {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event).push(callback);\n  }\n  off(event, callback) {\n    if (this.eventListeners.has(event)) {\n      const listeners = this.eventListeners.get(event);\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n  emit(event, data) {\n    if (this.eventListeners.has(event)) {\n      this.eventListeners.get(event).forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error(`Error in event handler for ${event}:`, error);\n        }\n      });\n    }\n  }\n\n  // Socket event emitters\n  joinRoom(roomId) {\n    if (this.socket && this.isConnected) {\n      console.log('Joining room:', roomId);\n      this.socket.emit('join_room', {\n        room_id: roomId\n      });\n    } else {\n      console.error('Cannot join room: Socket not connected');\n    }\n  }\n  leaveRoom() {\n    if (this.socket && this.isConnected) {\n      console.log('Leaving room');\n      this.socket.emit('leave_room');\n    } else {\n      console.error('Cannot leave room: Socket not connected');\n    }\n  }\n  sendDrawData(drawData) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('draw', drawData);\n    } else {\n      console.error('Cannot send draw data: Socket not connected');\n    }\n  }\n  sendChatMessage(message) {\n    if (this.socket && this.isConnected) {\n      console.log('üí¨ Sending chat message:', message);\n      this.socket.emit('chat_message', message);\n    } else {\n      console.error('‚ùå Cannot send chat message: Socket not connected');\n    }\n  }\n  sendGuess(guess) {\n    if (this.socket && this.isConnected) {\n      console.log('üéØ Sending guess:', guess);\n      this.socket.emit('guess_word', guess);\n    } else {\n      console.error('Cannot send guess: Socket not connected');\n    }\n  }\n  setReady(ready) {\n    if (this.socket && this.isConnected) {\n      console.log('Setting ready status:', ready);\n      this.socket.emit('ready', {\n        ready\n      });\n    } else {\n      console.error('Cannot set ready status: Socket not connected');\n    }\n  }\n  startGame(roomId) {\n    if (this.socket && this.isConnected) {\n      console.log('Starting game for room:', roomId);\n      this.socket.emit('start_game', {\n        room_id: roomId\n      });\n    } else {\n      console.error('Cannot start game: Socket not connected');\n    }\n  }\n}\n\n// Create singleton instance\nconst socketManager = new SocketManager();\nexport default socketManager;","map":{"version":3,"names":["io","SocketManager","constructor","socket","isConnected","eventListeners","Map","connectionAttempts","maxReconnectAttempts","reconnectDelay","connect","token","console","log","transports","timeout","reconnection","reconnectionAttempts","reconnectionDelay","on","emit","connected","reason","error","message","setupEventListeners","disconnect","data","event","callback","has","set","get","push","off","listeners","index","indexOf","splice","forEach","joinRoom","roomId","room_id","leaveRoom","sendDrawData","drawData","sendChatMessage","sendGuess","guess","setReady","ready","startGame","socketManager"],"sources":["/Users/walid/Documents/Networking/drawsync/frontend/src/utils/socket.js"],"sourcesContent":["import io from 'socket.io-client';\n\nclass SocketManager {\n  constructor() {\n    this.socket = null;\n    this.isConnected = false;\n    this.eventListeners = new Map();\n    this.connectionAttempts = 0;\n    this.maxReconnectAttempts = 5;\n    this.reconnectDelay = 1000;\n  }\n\n  connect(token) {\n    if (this.socket && this.isConnected) {\n      console.log('Socket already connected');\n      return;\n    }\n\n    console.log('Connecting to socket server...');\n    \n    this.socket = io('http://localhost:8001', {\n      transports: ['websocket', 'polling'],\n      timeout: 10000,\n      reconnection: true,\n      reconnectionAttempts: this.maxReconnectAttempts,\n      reconnectionDelay: this.reconnectDelay,\n    });\n\n    this.socket.on('connect', () => {\n      console.log('‚úÖ Connected to socket server');\n      this.isConnected = true;\n      this.connectionAttempts = 0;\n      \n      // Notify store about connection\n      this.emit('socket_connected', { connected: true });\n      \n      // Authenticate after connection\n      if (token) {\n        console.log('Authenticating with token...');\n        this.socket.emit('authenticate', { token });\n      }\n    });\n\n    this.socket.on('disconnect', (reason) => {\n      console.log('‚ùå Disconnected from socket server:', reason);\n      this.isConnected = false;\n      \n      // Notify store about disconnection\n      this.emit('socket_connected', { connected: false });\n      \n      if (reason === 'io server disconnect') {\n        // the disconnection was initiated by the server, you need to reconnect manually\n        console.log('Server disconnected, attempting to reconnect...');\n        this.socket.connect();\n      }\n    });\n\n    this.socket.on('connect_error', (error) => {\n      console.error('‚ùå Socket connection error:', error);\n      this.isConnected = false;\n      this.connectionAttempts++;\n      \n      // Notify store about connection error\n      this.emit('socket_connected', { connected: false, error: error.message });\n      \n      if (this.connectionAttempts < this.maxReconnectAttempts) {\n        console.log(`Retrying connection (${this.connectionAttempts}/${this.maxReconnectAttempts})...`);\n      } else {\n        console.error('Max reconnection attempts reached');\n      }\n    });\n\n    this.socket.on('error', (error) => {\n      console.error('‚ùå Socket error:', error);\n    });\n\n    // Set up event listeners\n    this.setupEventListeners();\n  }\n\n  disconnect() {\n    if (this.socket) {\n      console.log('Disconnecting from socket server...');\n      this.socket.disconnect();\n      this.socket = null;\n      this.isConnected = false;\n      this.connectionAttempts = 0;\n      \n      // Notify store about disconnection\n      this.emit('socket_connected', { connected: false });\n    }\n  }\n\n  setupEventListeners() {\n    // Authentication events\n    this.socket.on('authenticated', (data) => {\n      console.log('‚úÖ Authentication successful:', data);\n      this.emit('authenticated', data);\n    });\n\n    // Room events\n    this.socket.on('room_joined', (data) => {\n      console.log('‚úÖ Joined room:', data);\n      this.emit('room_joined', data);\n    });\n\n    this.socket.on('player_joined', (data) => {\n      console.log('üë§ Player joined:', data);\n      this.emit('player_joined', data);\n    });\n\n    this.socket.on('player_left', (data) => {\n      console.log('üë§ Player left:', data);\n      this.emit('player_left', data);\n    });\n\n    this.socket.on('player_disconnected', (data) => {\n      console.log('üë§ Player disconnected:', data);\n      this.emit('player_disconnected', data);\n    });\n\n    // Game events\n    this.socket.on('draw_data', (data) => {\n      this.emit('draw_data', data);\n    });\n\n    this.socket.on('chat_message', (data) => {\n      console.log('üí¨ Received chat message:', data);\n      this.emit('chat_message', data);\n    });\n\n    this.socket.on('guess_result', (data) => {\n      console.log('üéØ Guess result:', data);\n      this.emit('guess_result', data);\n    });\n\n    this.socket.on('word_guessed', (data) => {\n      console.log('üéâ Word guessed:', data);\n      this.emit('word_guessed', data);\n    });\n\n    this.socket.on('player_ready', (data) => {\n      console.log('‚úÖ Player ready:', data);\n      this.emit('player_ready', data);\n    });\n\n    this.socket.on('game_started', (data) => {\n      console.log('üéÆ Game started:', data);\n      this.emit('game_started', data);\n    });\n\n    this.socket.on('round_started', (data) => {\n      console.log('üîÑ Round started:', data);\n      this.emit('round_started', data);\n    });\n\n    this.socket.on('round_ended', (data) => {\n      console.log('‚èπÔ∏è Round ended:', data);\n      this.emit('round_ended', data);\n    });\n\n    this.socket.on('game_ended', (data) => {\n      console.log('üèÅ Game ended:', data);\n      this.emit('game_ended', data);\n    });\n\n    this.socket.on('game_state', (data) => {\n      console.log('üéÆ Game state update:', data);\n      this.emit('game_state', data);\n    });\n  }\n\n  // Event listener management\n  on(event, callback) {\n    if (!this.eventListeners.has(event)) {\n      this.eventListeners.set(event, []);\n    }\n    this.eventListeners.get(event).push(callback);\n  }\n\n  off(event, callback) {\n    if (this.eventListeners.has(event)) {\n      const listeners = this.eventListeners.get(event);\n      const index = listeners.indexOf(callback);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    }\n  }\n\n  emit(event, data) {\n    if (this.eventListeners.has(event)) {\n      this.eventListeners.get(event).forEach(callback => {\n        try {\n          callback(data);\n        } catch (error) {\n          console.error(`Error in event handler for ${event}:`, error);\n        }\n      });\n    }\n  }\n\n  // Socket event emitters\n  joinRoom(roomId) {\n    if (this.socket && this.isConnected) {\n      console.log('Joining room:', roomId);\n      this.socket.emit('join_room', { room_id: roomId });\n    } else {\n      console.error('Cannot join room: Socket not connected');\n    }\n  }\n\n  leaveRoom() {\n    if (this.socket && this.isConnected) {\n      console.log('Leaving room');\n      this.socket.emit('leave_room');\n    } else {\n      console.error('Cannot leave room: Socket not connected');\n    }\n  }\n\n  sendDrawData(drawData) {\n    if (this.socket && this.isConnected) {\n      this.socket.emit('draw', drawData);\n    } else {\n      console.error('Cannot send draw data: Socket not connected');\n    }\n  }\n\n  sendChatMessage(message) {\n    if (this.socket && this.isConnected) {\n      console.log('üí¨ Sending chat message:', message);\n      this.socket.emit('chat_message', message);\n    } else {\n      console.error('‚ùå Cannot send chat message: Socket not connected');\n    }\n  }\n\n  sendGuess(guess) {\n    if (this.socket && this.isConnected) {\n      console.log('üéØ Sending guess:', guess);\n      this.socket.emit('guess_word', guess);\n    } else {\n      console.error('Cannot send guess: Socket not connected');\n    }\n  }\n\n  setReady(ready) {\n    if (this.socket && this.isConnected) {\n      console.log('Setting ready status:', ready);\n      this.socket.emit('ready', { ready });\n    } else {\n      console.error('Cannot set ready status: Socket not connected');\n    }\n  }\n\n  startGame(roomId) {\n    if (this.socket && this.isConnected) {\n      console.log('Starting game for room:', roomId);\n      this.socket.emit('start_game', { room_id: roomId });\n    } else {\n      console.error('Cannot start game: Socket not connected');\n    }\n  }\n}\n\n// Create singleton instance\nconst socketManager = new SocketManager();\nexport default socketManager; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}